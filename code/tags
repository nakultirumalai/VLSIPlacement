!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddEdgeInt	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::AddEdgeInt(void *object, unsigned int weight)$/;"	f	class:HyperGraph
AddNodeInt	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::AddNodeInt(void *object)$/;"	f	class:HyperGraph
CC	$CODE_ROOT/Makefile	/^CC=g++$/;"	m
CELL_END_FOR	$CODE_ROOT/Cell/CellMacros.h	28;"	d
CELL_END_FOR	$CODE_ROOT/include/CellMacros.h	28;"	d
CELL_FOR_ALL_NETS	$CODE_ROOT/Cell/CellMacros.h	15;"	d
CELL_FOR_ALL_NETS	$CODE_ROOT/include/CellMacros.h	15;"	d
CELL_FOR_ALL_PINS	$CODE_ROOT/Cell/CellMacros.h	5;"	d
CELL_FOR_ALL_PINS	$CODE_ROOT/include/CellMacros.h	5;"	d
CELL_H	$CODE_ROOT/Cell/Cell.h	2;"	d
CELL_H	$CODE_ROOT/include/Cell.h	2;"	d
CELL_IS_CLUSTERED_FLAG	$CODE_ROOT/Flags/Flags.h	/^  CELL_IS_CLUSTERED_FLAG = 0,$/;"	e	enum:__anon1
CELL_IS_CLUSTERED_FLAG	$CODE_ROOT/include/Flags.h	/^  CELL_IS_CLUSTERED_FLAG = 0,$/;"	e	enum:__anon2
CELL_MACROS_H	$CODE_ROOT/Cell/CellMacros.h	2;"	d
CELL_MACROS_H	$CODE_ROOT/include/CellMacros.h	2;"	d
CFLAGS	$CODE_ROOT/Makefile	/^	CFLAGS= -O3 -pg$/;"	m
CFLAGS	$CODE_ROOT/Makefile	/^	CFLAGS= -g $/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Cell/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Design/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Flags/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/HyperGraph/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Net/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/PhysData/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Pin/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Sort/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/Stat/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CFLAGS_LOCAL	$CODE_ROOT/common/Makefile	/^CFLAGS_LOCAL = $(CFLAGS) -c$/;"	m
CLUSTER_NAME_PREFIX	$CODE_ROOT/Design/Design.h	93;"	d
CLUSTER_NAME_PREFIX	$CODE_ROOT/include/Design.h	93;"	d
COMMON_DEBUG	$CODE_ROOT/common/common.h	19;"	d
COMMON_DEBUG	$CODE_ROOT/include/common.h	19;"	d
COMMON_H	$CODE_ROOT/common/common.h	2;"	d
COMMON_H	$CODE_ROOT/include/common.h	2;"	d
COMMON_ITER_H	$CODE_ROOT/common/commonIter.h	2;"	d
COMMON_ITER_H	$CODE_ROOT/include/commonIter.h	2;"	d
CPU_TIME_UNIT	$CODE_ROOT/Stat/Stat.h	5;"	d
CPU_TIME_UNIT	$CODE_ROOT/include/Stat.h	5;"	d
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell()$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width) $/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, int Xpos, int Ypos)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, int Xpos, int Ypos, objOrient Orientation)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, int Xpos, int Ypos, objOrient Orientation, string Name)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, int Xpos, int Ypos, objOrient Orientation, string Name, bool terminalCell)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, int Xpos, int Ypos, string Name)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, int Xpos, int Ypos, string Name, $/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, string Name)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::Cell(int Height, int Width, string Name, bool terminalCell)$/;"	f	class:Cell
Cell	$CODE_ROOT/Cell/Cell.h	/^class Cell {$/;"	c
Cell	$CODE_ROOT/include/Cell.h	/^class Cell {$/;"	c
CellAddChildCell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellAddChildCell(Cell &thisCell)$/;"	f	class:Cell
CellAddPin	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellAddPin(Pin *pinPtr)$/;"	f	class:Cell
CellClearAllIsClustered	$CODE_ROOT/Flags/FlagsMain.cxx	/^void CellClearAllIsClustered(void)$/;"	f
CellClearIsClustered	$CODE_ROOT/Flags/FlagsMain.cxx	/^void CellClearIsClustered(Cell *cellPtr)$/;"	f
CellDecrementClusterLevel	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellDecrementClusterLevel(void)$/;"	f	class:Cell
CellGetArea	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetArea(void)$/;"	f	class:Cell
CellGetChildCells	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetChildCells(void)$/;"	f	class:Cell
CellGetClusterLevel	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetClusterLevel(void)$/;"	f	class:Cell
CellGetHeight	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetHeight(void)$/;"	f	class:Cell
CellGetName	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetName(void)$/;"	f	class:Cell
CellGetNumPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetNumPins(int pinDir)$/;"	f	class:Cell
CellGetNumPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetNumPins(void)$/;"	f	class:Cell
CellGetOrientation	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetOrientation(void)$/;"	f	class:Cell
CellGetPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetPins(int pinDir)$/;"	f	class:Cell
CellGetPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetPins(void)$/;"	f	class:Cell
CellGetWidth	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetWidth(void)$/;"	f	class:Cell
CellGetXpos	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetXpos(void)$/;"	f	class:Cell
CellGetYpos	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellGetYpos(void)$/;"	f	class:Cell
CellIncrementClusterLevel	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIncrementClusterLevel(void)$/;"	f	class:Cell
CellIsCluster	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIsCluster(void)$/;"	f	class:Cell
CellIsClusterChild	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIsClusterChild(void)$/;"	f	class:Cell
CellIsClustered	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIsClustered(void)$/;"	f	class:Cell
CellIsClustered	$CODE_ROOT/Flags/FlagsMain.cxx	/^bool CellIsClustered(Cell *cellPtr)$/;"	f
CellIsFixed	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIsFixed(void)$/;"	f	class:Cell
CellIsMacro	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIsMacro(void)$/;"	f	class:Cell
CellIsTerminal	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellIsTerminal(void)$/;"	f	class:Cell
CellMoveCell	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellMoveCell(int XOffset, int YOffset)$/;"	f	class:Cell
CellMoveDown	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellMoveDown(int offset)$/;"	f	class:Cell
CellMoveLeft	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellMoveLeft(int offset)$/;"	f	class:Cell
CellMoveRight	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellMoveRight(int offset)$/;"	f	class:Cell
CellMoveUp	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellMoveUp(int offset)$/;"	f	class:Cell
CellSetClusterLevel	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetClusterLevel(unsigned int clusterLevel)$/;"	f	class:Cell
CellSetHeight	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetHeight(int Height) $/;"	f	class:Cell
CellSetIsCluster	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetIsCluster(const bool& isCluster)$/;"	f	class:Cell
CellSetIsClusterChild	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetIsClusterChild(const bool& isClusterChild)$/;"	f	class:Cell
CellSetIsClustered	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetIsClustered(const bool& isClustered)$/;"	f	class:Cell
CellSetIsClustered	$CODE_ROOT/Flags/FlagsMain.cxx	/^void CellSetIsClustered(Cell *cellPtr)$/;"	f
CellSetIsFixed	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetIsFixed(const bool & isFixed) $/;"	f	class:Cell
CellSetIsMacro	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetIsMacro(const bool & isMacro) $/;"	f	class:Cell
CellSetIsTerminal	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetIsTerminal(const bool& terminalCell)$/;"	f	class:Cell
CellSetName	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetName(const string& cellName)$/;"	f	class:Cell
CellSetNumInPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetNumInPins(int numInPins)$/;"	f	class:Cell
CellSetNumOutPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetNumOutPins(int numOutPins)$/;"	f	class:Cell
CellSetNumPins	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetNumPins(int numPins)$/;"	f	class:Cell
CellSetOrientation	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetOrientation(objOrient orient)$/;"	f	class:Cell
CellSetPos	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetPos(int Xpos, int Ypos) $/;"	f	class:Cell
CellSetWidth	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetWidth(int Width)$/;"	f	class:Cell
CellSetXpos	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetXpos(int Xpos) $/;"	f	class:Cell
CellSetYpos	$CODE_ROOT/Cell/Cell.cxx	/^Cell::CellSetYpos(int Ypos)$/;"	f	class:Cell
ClusterInfo	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  map<unsigned int, mapOfVectors> ClusterInfo;$/;"	m	class:HyperGraph
ClusterInfo	$CODE_ROOT/include/HyperGraph.h	/^  map<unsigned int, mapOfVectors> ClusterInfo;$/;"	m	class:HyperGraph
Connect	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Connect(const Net& netToConnect)$/;"	f	class:Pin
ConnectedNet	$CODE_ROOT/Pin/Pin.h	/^  Net *ConnectedNet;$/;"	m	class:Pin
ConnectedNet	$CODE_ROOT/include/Pin.h	/^  Net *ConnectedNet;$/;"	m	class:Pin
DEFAULT_CLUSTER	$CODE_ROOT/Design/Design.h	/^  DEFAULT_CLUSTER, $/;"	e	enum:__anon7
DEFAULT_CLUSTER	$CODE_ROOT/include/Design.h	/^  DEFAULT_CLUSTER, $/;"	e	enum:__anon4
DEFAULT_COORDINATE	$CODE_ROOT/PhysData/PhysRow.h	7;"	d
DEFAULT_COORDINATE	$CODE_ROOT/include/PhysRow.h	7;"	d
DEFAULT_NUM_SITES	$CODE_ROOT/PhysData/PhysRow.h	13;"	d
DEFAULT_NUM_SITES	$CODE_ROOT/include/PhysRow.h	13;"	d
DEFAULT_NUM_SUBROWS	$CODE_ROOT/PhysData/PhysRow.h	14;"	d
DEFAULT_NUM_SUBROWS	$CODE_ROOT/include/PhysRow.h	14;"	d
DEFAULT_SITE_HEIGHT	$CODE_ROOT/PhysData/PhysRow.h	10;"	d
DEFAULT_SITE_HEIGHT	$CODE_ROOT/include/PhysRow.h	10;"	d
DEFAULT_SITE_ORIENTATION	$CODE_ROOT/PhysData/PhysRow.h	8;"	d
DEFAULT_SITE_ORIENTATION	$CODE_ROOT/include/PhysRow.h	8;"	d
DEFAULT_SITE_SPACING	$CODE_ROOT/PhysData/PhysRow.h	12;"	d
DEFAULT_SITE_SPACING	$CODE_ROOT/include/PhysRow.h	12;"	d
DEFAULT_SITE_SYMMETRY	$CODE_ROOT/PhysData/PhysRow.h	9;"	d
DEFAULT_SITE_SYMMETRY	$CODE_ROOT/include/PhysRow.h	9;"	d
DEFAULT_SITE_WIDTH	$CODE_ROOT/PhysData/PhysRow.h	11;"	d
DEFAULT_SITE_WIDTH	$CODE_ROOT/include/PhysRow.h	11;"	d
DEFAULT_SUBROWS	$CODE_ROOT/PhysData/PhysRow.h	15;"	d
DEFAULT_SUBROWS	$CODE_ROOT/include/PhysRow.h	15;"	d
DESIGN_AUX_FILE_EXT	$CODE_ROOT/Design/Design.h	21;"	d
DESIGN_AUX_FILE_EXT	$CODE_ROOT/include/Design.h	21;"	d
DESIGN_CELL_FILE_EXT	$CODE_ROOT/Design/Design.h	22;"	d
DESIGN_CELL_FILE_EXT	$CODE_ROOT/include/Design.h	22;"	d
DESIGN_END_FOR	$CODE_ROOT/Design/DesignIter.h	62;"	d
DESIGN_END_FOR	$CODE_ROOT/include/DesignIter.h	62;"	d
DESIGN_FOR_ALL_CELLS	$CODE_ROOT/Design/DesignIter.h	10;"	d
DESIGN_FOR_ALL_CELLS	$CODE_ROOT/include/DesignIter.h	10;"	d
DESIGN_FOR_ALL_CELLS_ON_TOP	$CODE_ROOT/Design/DesignIter.h	18;"	d
DESIGN_FOR_ALL_CELLS_ON_TOP	$CODE_ROOT/include/DesignIter.h	18;"	d
DESIGN_FOR_ALL_NETS	$CODE_ROOT/Design/DesignIter.h	29;"	d
DESIGN_FOR_ALL_NETS	$CODE_ROOT/include/DesignIter.h	29;"	d
DESIGN_FOR_ALL_STD_CELLS	$CODE_ROOT/Design/DesignIter.h	50;"	d
DESIGN_FOR_ALL_STD_CELLS	$CODE_ROOT/include/DesignIter.h	50;"	d
DESIGN_FOR_ALL_STD_CELLS_FILT	$CODE_ROOT/Design/DesignIter.h	38;"	d
DESIGN_FOR_ALL_STD_CELLS_FILT	$CODE_ROOT/include/DesignIter.h	38;"	d
DESIGN_H	$CODE_ROOT/Design/Design.h	2;"	d
DESIGN_H	$CODE_ROOT/include/Design.h	2;"	d
DESIGN_ITER_H	$CODE_ROOT/Design/DesignIter.h	4;"	d
DESIGN_ITER_H	$CODE_ROOT/include/DesignIter.h	4;"	d
DESIGN_NET_FILE_EXT	$CODE_ROOT/Design/Design.h	23;"	d
DESIGN_NET_FILE_EXT	$CODE_ROOT/include/Design.h	23;"	d
DESIGN_NET_WTS_FILE_EXT	$CODE_ROOT/Design/Design.h	24;"	d
DESIGN_NET_WTS_FILE_EXT	$CODE_ROOT/include/Design.h	24;"	d
DESIGN_PL_FILE_EXT	$CODE_ROOT/Design/Design.h	26;"	d
DESIGN_PL_FILE_EXT	$CODE_ROOT/include/Design.h	26;"	d
DESIGN_SCL_FILE_EXT	$CODE_ROOT/Design/Design.h	25;"	d
DESIGN_SCL_FILE_EXT	$CODE_ROOT/include/Design.h	25;"	d
DIR_SEP	$CODE_ROOT/Design/Design.h	85;"	d
DIR_SEP	$CODE_ROOT/include/Design.h	85;"	d
Design	$CODE_ROOT/Design/Design.h	/^class Design {$/;"	c
Design	$CODE_ROOT/Design/DesignMain.cxx	/^Design::Design() $/;"	f	class:Design
Design	$CODE_ROOT/Design/DesignMain.cxx	/^Design::Design(string DesignPath, string DesignName)$/;"	f	class:Design
Design	$CODE_ROOT/include/Design.h	/^class Design {$/;"	c
DesignAddOneCellToDesignDB	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignAddOneCellToDesignDB(Cell *newCell)$/;"	f	class:Design
DesignAddOneNetToDesignDB	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignAddOneNetToDesignDB(Net *newNet)$/;"	f	class:Design
DesignAddOnePhysRowToDesignDB	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignAddOnePhysRowToDesignDB(PhysRow *row)$/;"	f	class:Design
DesignCellFileName	$CODE_ROOT/Design/Design.h	/^  string DesignCellFileName;$/;"	m	class:Design
DesignCellFileName	$CODE_ROOT/include/Design.h	/^  string DesignCellFileName;$/;"	m	class:Design
DesignCellIsStdCell	$CODE_ROOT/Design/DesignUtils.cxx	/^DesignCellIsStdCell(Design &myDesign, Cell &thisCell)$/;"	f
DesignCells	$CODE_ROOT/Design/Design.h	/^  map<string, Cell*> DesignCells;$/;"	m	class:Design
DesignCells	$CODE_ROOT/include/Design.h	/^  map<string, Cell*> DesignCells;$/;"	m	class:Design
DesignCloseFile	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignCloseFile(void)$/;"	f	class:Design
DesignClusterCells	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignClusterCells(HyperGraph& myGraph, clusteringType clustType) $/;"	f	class:Design
DesignClusterSpecifiedCells	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignClusterSpecifiedCells(vector<vector<void * > >listOfCells, $/;"	f	class:Design
DesignClusters	$CODE_ROOT/Design/Design.h	/^  map<string, Cell*> DesignClusters;$/;"	m	class:Design
DesignClusters	$CODE_ROOT/include/Design.h	/^  map<string, Cell*> DesignClusters;$/;"	m	class:Design
DesignCollapseCluster	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignCollapseCluster(Cell& MasterCell)$/;"	f	class:Design
DesignCollectStats	$CODE_ROOT/Design/DesignAnalysis.cxx	/^DesignCollectStats(Design& myDesign)$/;"	f
DesignCreateGraph	$CODE_ROOT/Design/DesignGraph.cxx	/^void DesignCreateGraph(Design& myDesign, HyperGraph& thisGraph)$/;"	f
DesignDoDefaultCluster	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignDoDefaultCluster(HyperGraph &myGraph) $/;"	f	class:Design
DesignDoESCCluster	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignDoESCCluster(HyperGraph &myGraph) $/;"	f	class:Design
DesignDoFCCluster	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignDoFCCluster(HyperGraph &myGraph) $/;"	f	class:Design
DesignDoNetCluster	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignDoNetCluster(HyperGraph &myGraph) $/;"	f	class:Design
DesignFile	$CODE_ROOT/Design/Design.h	/^  ifstream DesignFile;$/;"	m	class:Design
DesignFile	$CODE_ROOT/include/Design.h	/^  ifstream DesignFile;$/;"	m	class:Design
DesignFileReadFixedCells	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadFixedCells(ifstream& file)$/;"	f	class:Design
DesignFileReadHeader	$CODE_ROOT/Design/DesignUtils.cxx	/^Design::DesignFileReadHeader(ifstream& file)$/;"	f	class:Design
DesignFileReadNets	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadNets(ifstream& file)$/;"	f	class:Design
DesignFileReadNodes	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadNodes(ifstream& file)$/;"	f	class:Design
DesignFileReadOneFixedCell	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadOneFixedCell(ifstream &file)$/;"	f	class:Design
DesignFileReadOneNet	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadOneNet(ifstream &file)$/;"	f	class:Design
DesignFileReadOneNode	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadOneNode(ifstream& file)$/;"	f	class:Design
DesignFileReadOneRow	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadOneRow(ifstream &file)$/;"	f	class:Design
DesignFileReadPins	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadPins(ifstream &file, unsigned int netDegree,$/;"	f	class:Design
DesignFileReadRows	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignFileReadRows(ifstream& file)$/;"	f	class:Design
DesignGetCells	$CODE_ROOT/Design/DesignMain.cxx	/^map<string,Cell*>& Design::DesignGetCells(void)$/;"	f	class:Design
DesignGetConnectedCells	$CODE_ROOT/Design/DesignCluster.cxx	/^DesignGetConnectedCells(HyperGraph &myGraph, Cell *cellPtr) $/;"	f
DesignGetGraph	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetGraph(void)$/;"	f	class:Design
DesignGetName	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetName(void)$/;"	f	class:Design
DesignGetNets	$CODE_ROOT/Design/DesignMain.cxx	/^map<string,Net*>& Design::DesignGetNets(void)$/;"	f	class:Design
DesignGetNode	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNode(string nodeName)$/;"	f	class:Design
DesignGetNumCells	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNumCells(void)$/;"	f	class:Design
DesignGetNumFixedCells	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNumFixedCells(void)$/;"	f	class:Design
DesignGetNumNets	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNumNets(void)$/;"	f	class:Design
DesignGetNumPhysRows	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNumPhysRows(void)$/;"	f	class:Design
DesignGetNumTerminalCells	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNumTerminalCells(void)$/;"	f	class:Design
DesignGetNumTopCells	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetNumTopCells(void)$/;"	f	class:Design
DesignGetPath	$CODE_ROOT/Design/Design.h	/^  string DesignGetPath() { }$/;"	f	class:Design
DesignGetPath	$CODE_ROOT/include/Design.h	/^  string DesignGetPath() { }$/;"	f	class:Design
DesignGetRowHeights	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetRowHeights()$/;"	f	class:Design
DesignGetSingleRowHeight	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignGetSingleRowHeight(void)$/;"	f	class:Design
DesignGetStatData	$CODE_ROOT/Design/DesignAnalysis.cxx	/^DesignGetStatData(map<dataType, unsigned int> table) $/;"	f
DesignGraphPtr	$CODE_ROOT/Design/Design.h	/^  HyperGraph *DesignGraphPtr;$/;"	m	class:Design
DesignGraphPtr	$CODE_ROOT/include/Design.h	/^  HyperGraph *DesignGraphPtr;$/;"	m	class:Design
DesignHideNets	$CODE_ROOT/Design/DesignCluster.cxx	/^Design::DesignHideNets(vector<void *> affectedNets, vector<void *> listOfCells)$/;"	f	class:Design
DesignInit	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignInit()$/;"	f	class:Design
DesignNetFileName	$CODE_ROOT/Design/Design.h	/^  string DesignNetFileName;$/;"	m	class:Design
DesignNetFileName	$CODE_ROOT/include/Design.h	/^  string DesignNetFileName;$/;"	m	class:Design
DesignNetWtsFileName	$CODE_ROOT/Design/Design.h	/^  string DesignNetWtsFileName;$/;"	m	class:Design
DesignNetWtsFileName	$CODE_ROOT/include/Design.h	/^  string DesignNetWtsFileName;$/;"	m	class:Design
DesignNets	$CODE_ROOT/Design/Design.h	/^  map<string, Net*> DesignNets;$/;"	m	class:Design
DesignNets	$CODE_ROOT/include/Design.h	/^  map<string, Net*> DesignNets;$/;"	m	class:Design
DesignOpenFile	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignOpenFile(string FileName)$/;"	f	class:Design
DesignPath	$CODE_ROOT/Design/Design.h	/^  string DesignPath;$/;"	m	class:Design
DesignPath	$CODE_ROOT/include/Design.h	/^  string DesignPath;$/;"	m	class:Design
DesignPhysRows	$CODE_ROOT/Design/Design.h	/^  vector<PhysRow*> DesignPhysRows;$/;"	m	class:Design
DesignPhysRows	$CODE_ROOT/include/Design.h	/^  vector<PhysRow*> DesignPhysRows;$/;"	m	class:Design
DesignPlFileName	$CODE_ROOT/Design/Design.h	/^  string DesignPlFileName;$/;"	m	class:Design
DesignPlFileName	$CODE_ROOT/include/Design.h	/^  string DesignPlFileName;$/;"	m	class:Design
DesignProcessProperty	$CODE_ROOT/Design/DesignUtils.cxx	/^Design::DesignProcessProperty(ifstream& file, string& Property, $/;"	f	class:Design
DesignReadCellPlacement	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignReadCellPlacement()$/;"	f	class:Design
DesignReadCells	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignReadCells()$/;"	f	class:Design
DesignReadDesign	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignReadDesign(string DesignPath, string DesignName)$/;"	f	class:Design
DesignReadNets	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignReadNets()$/;"	f	class:Design
DesignReadRows	$CODE_ROOT/Design/DesignRead.cxx	/^Design::DesignReadRows()$/;"	f	class:Design
DesignSclFileName	$CODE_ROOT/Design/Design.h	/^  string DesignSclFileName;$/;"	m	class:Design
DesignSclFileName	$CODE_ROOT/include/Design.h	/^  string DesignSclFileName;$/;"	m	class:Design
DesignSetGraph	$CODE_ROOT/Design/DesignMain.cxx	/^Design::DesignSetGraph(HyperGraph& thisGraph) $/;"	f	class:Design
DesignWriteBookShelfOutput	$CODE_ROOT/Design/DesignWrite.cxx	/^void DesignWriteBookShelfOutput(Design& myDesign)$/;"	f
DesignWriteNets	$CODE_ROOT/Design/DesignWrite.cxx	/^void DesignWriteNets(Design &myDesign) $/;"	f
DesignWriteNodes	$CODE_ROOT/Design/DesignWrite.cxx	/^void DesignWriteNodes(Design &myDesign, string fname) $/;"	f
DesignWritePlacement	$CODE_ROOT/Design/DesignWrite.cxx	/^void DesignWritePlacement(Design &myDesign) $/;"	f
DesignWriteStats	$CODE_ROOT/Design/DesignAnalysis.cxx	/^void DesignWriteStats(Design& myDesign)$/;"	f
Disconnect	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Disconnect(void)$/;"	f	class:Pin
DoMerge	$CODE_ROOT/Sort/Sort.cxx	/^DoMerge(vector<Type> &thisVector, int Left, int Mid, int Right,	funcPtrType this_func) $/;"	f
E	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
E	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
EDGE_FOR_ALL_ADJACENT_NODES	$CODE_ROOT/HyperGraph/EdgeIter.h	12;"	d
EDGE_FOR_ALL_NODES	$CODE_ROOT/HyperGraph/EdgeIter.h	4;"	d
EDGE_H	$CODE_ROOT/HyperGraph/Edge.h	2;"	d
EDGE_H	$CODE_ROOT/include/Edge.h	2;"	d
EDGE_ITER_H	$CODE_ROOT/HyperGraph/EdgeIter.h	2;"	d
END_FOR	$CODE_ROOT/common/commonIter.h	32;"	d
END_FOR	$CODE_ROOT/include/commonIter.h	32;"	d
ESC_CLUSTER	$CODE_ROOT/Design/Design.h	/^  ESC_CLUSTER,$/;"	e	enum:__anon7
ESC_CLUSTER	$CODE_ROOT/include/Design.h	/^  ESC_CLUSTER,$/;"	e	enum:__anon4
Edge	$CODE_ROOT/HyperGraph/Edge.cxx	/^Edge::Edge() $/;"	f	class:Edge
Edge	$CODE_ROOT/HyperGraph/Edge.cxx	/^Edge::Edge(void *object)$/;"	f	class:Edge
Edge	$CODE_ROOT/HyperGraph/Edge.h	/^class Edge {$/;"	c
Edge	$CODE_ROOT/include/Edge.h	/^class Edge {$/;"	c
EdgeAddNode	$CODE_ROOT/HyperGraph/Edge.cxx	/^void Edge::EdgeAddNode(unsigned int nodeIdx)$/;"	f	class:Edge
EdgeGetNodes	$CODE_ROOT/HyperGraph/Edge.cxx	/^vector<unsigned int>& Edge::EdgeGetNodes(void)$/;"	f	class:Edge
EdgeGetObject	$CODE_ROOT/HyperGraph/Edge.cxx	/^void* Edge::EdgeGetObject(void)$/;"	f	class:Edge
EdgeGetWeight	$CODE_ROOT/HyperGraph/Edge.cxx	/^unsigned int Edge::EdgeGetWeight(void)$/;"	f	class:Edge
EdgeSetIdx	$CODE_ROOT/HyperGraph/Edge.cxx	/^void Edge::EdgeSetIdx(unsigned int edgeIdx)$/;"	f	class:Edge
EdgeSetObject	$CODE_ROOT/HyperGraph/Edge.cxx	/^void Edge::EdgeSetObject(void *object)$/;"	f	class:Edge
EdgeSetWeight	$CODE_ROOT/HyperGraph/Edge.cxx	/^void Edge::EdgeSetWeight(unsigned int weight)$/;"	f	class:Edge
Edges2Nodes	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  vector<map<unsigned int, unsigned int > > Edges2Nodes;$/;"	m	class:HyperGraph
Edges2Nodes	$CODE_ROOT/include/HyperGraph.h	/^  vector<map<unsigned int, unsigned int > > Edges2Nodes;$/;"	m	class:HyperGraph
FC_CLUSTER	$CODE_ROOT/Design/Design.h	/^  FC_CLUSTER,$/;"	e	enum:__anon7
FC_CLUSTER	$CODE_ROOT/include/Design.h	/^  FC_CLUSTER,$/;"	e	enum:__anon4
FE	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
FE	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
FLAGS_H	$CODE_ROOT/Flags/Flags.h	2;"	d
FLAGS_H	$CODE_ROOT/include/Flags.h	2;"	d
FN	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
FN	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
FS	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
FS	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
FW	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
FW	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
FlagsDef	$CODE_ROOT/Flags/FlagsDef.cxx	/^vector<map<void *, bool> > FlagsDef;$/;"	v
FlagsDefClearFlag	$CODE_ROOT/Flags/FlagsDef.cxx	/^void FlagsDefClearFlag(flagType fType, void* obj)$/;"	f
FlagsDefClearFlagAllObjs	$CODE_ROOT/Flags/FlagsDef.cxx	/^void FlagsDefClearFlagAllObjs(flagType fType)$/;"	f
FlagsDefGetFlag	$CODE_ROOT/Flags/FlagsDef.cxx	/^bool FlagsDefGetFlag(flagType fType, void *obj)$/;"	f
FlagsDefSetFlag	$CODE_ROOT/Flags/FlagsDef.cxx	/^void FlagsDefSetFlag(flagType fType, void* obj)$/;"	f
FlagsInit	$CODE_ROOT/Flags/FlagsDef.cxx	/^void FlagsInit()$/;"	f
HFILES	$CODE_ROOT/Cell/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Cell/Makefile	/^HFILES:= Cell.h Pin.h$/;"	m
HFILES	$CODE_ROOT/Design/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Design/Makefile	/^HFILES:= Design.h Cell.h$/;"	m
HFILES	$CODE_ROOT/Flags/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Flags/Makefile	/^HFILES:= Flags.h$/;"	m
HFILES	$CODE_ROOT/HyperGraph/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/HyperGraph/Makefile	/^HFILES:= HyperGraph.h Node.h Edge.h$/;"	m
HFILES	$CODE_ROOT/Net/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Net/Makefile	/^HFILES:= Net.h Pin.h$/;"	m
HFILES	$CODE_ROOT/PhysData/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/PhysData/Makefile	/^HFILES:= PhysRow.h $/;"	m
HFILES	$CODE_ROOT/Pin/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Pin/Makefile	/^HFILES:= Pin.h $/;"	m
HFILES	$CODE_ROOT/Sort/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Sort/Makefile	/^HFILES:= Sort.h$/;"	m
HFILES	$CODE_ROOT/Stat/Makefile	/^HFILES:= $(addprefix $(INCLUDE_DIR)\/, $(HFILES))$/;"	m
HFILES	$CODE_ROOT/Stat/Makefile	/^HFILES:= Stat.h$/;"	m
HORIZONTAL	$CODE_ROOT/PhysData/PhysRow.h	/^typedef enum {VERTICAL,HORIZONTAL} rowOrientation;$/;"	e	enum:__anon9
HORIZONTAL	$CODE_ROOT/include/PhysRow.h	/^typedef enum {VERTICAL,HORIZONTAL} rowOrientation;$/;"	e	enum:__anon5
HYPERGRAPH_END_FOR	$CODE_ROOT/HyperGraph/HyperGraphIter.h	13;"	d
HYPERGRAPH_FOR_ALL_EDGES	$CODE_ROOT/HyperGraph/HyperGraphIter.h	9;"	d
HYPERGRAPH_FOR_ALL_NODES	$CODE_ROOT/HyperGraph/HyperGraphIter.h	4;"	d
HYPERGRAPH_H	$CODE_ROOT/HyperGraph/HyperGraph.h	2;"	d
HYPERGRAPH_H	$CODE_ROOT/include/HyperGraph.h	2;"	d
HYPERGRAPH_ITER_H	$CODE_ROOT/HyperGraph/HyperGraphIter.h	2;"	d
HYPERGRAPH_MACROS_H	$CODE_ROOT/HyperGraph/HyperGraphMacros.h	2;"	d
HyperGraph	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraph() $/;"	f	class:HyperGraph
HyperGraph	$CODE_ROOT/HyperGraph/HyperGraph.h	/^class HyperGraph {$/;"	c
HyperGraph	$CODE_ROOT/include/HyperGraph.h	/^class HyperGraph {$/;"	c
HyperGraphAddEdge	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphAddEdge(vector<void *> &cellList, void *EdgeObject, $/;"	f	class:HyperGraph
HyperGraphAddNode	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphAddNode(void *object)$/;"	f	class:HyperGraph
HyperGraphClusterNodes	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphClusterNodes(vector<unsigned int> nodesList,$/;"	f	class:HyperGraph
HyperGraphGetCellIndex	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphGetCellIndex(void *cellPtr)$/;"	f	class:HyperGraph
HyperGraphGetConnectedCells	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphGetConnectedCells(void* cellPtr)$/;"	f	class:HyperGraph
HyperGraphGetEdges	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphGetEdges(void)$/;"	f	class:HyperGraph
HyperGraphGetNodes	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphGetNodes(void)$/;"	f	class:HyperGraph
HyperGraphGetNumEdges	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphGetNumEdges(void)$/;"	f	class:HyperGraph
HyperGraphGetNumNodes	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphGetNumNodes(void)$/;"	f	class:HyperGraph
HyperGraphUnclusterNodes	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::HyperGraphUnclusterNodes(vector<unsigned int> clusteredNodeSet) $/;"	f	class:HyperGraph
INCLUDE_DIR	$CODE_ROOT/Cell/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Design/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Flags/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/HyperGraph/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Net/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/PhysData/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Pin/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Sort/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/Stat/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
INCLUDE_DIR	$CODE_ROOT/common/Makefile	/^INCLUDE_DIR=$(CODE_ROOT)\/include$/;"	m
IN_EDGE	$CODE_ROOT/HyperGraph/Node.h	/^  IN_EDGE,$/;"	e	enum:edgeType
IN_EDGE	$CODE_ROOT/include/Node.h	/^  IN_EDGE,$/;"	e	enum:edgeType
Id	$CODE_ROOT/Net/Net.h	/^  int Id;$/;"	m	class:Net
Id	$CODE_ROOT/Pin/Pin.h	/^  int Id;$/;"	m	class:Pin
Id	$CODE_ROOT/include/Net.h	/^  int Id;$/;"	m	class:Net
Id	$CODE_ROOT/include/Pin.h	/^  int Id;$/;"	m	class:Pin
LFLAGS	$CODE_ROOT/Makefile	/^LFLAGS= $/;"	m
MAKE	$CODE_ROOT/Makefile	/^MAKE=make$/;"	m
MAP_FOR_ALL_ELEMS	$CODE_ROOT/common/commonIter.h	19;"	d
MAP_FOR_ALL_ELEMS	$CODE_ROOT/include/commonIter.h	19;"	d
MAP_FOR_ALL_KEYS	$CODE_ROOT/common/commonIter.h	25;"	d
MAP_FOR_ALL_KEYS	$CODE_ROOT/include/commonIter.h	25;"	d
MAX_ARGS	$CODE_ROOT/main.cxx	7;"	d	file:
MAX_OUTPUTS	$CODE_ROOT/Design/DesignAnalysis.cxx	12;"	d	file:
MCOMMA	$CODE_ROOT/common/common.h	58;"	d
MCOMMA	$CODE_ROOT/include/common.h	58;"	d
MEM_USAGE_UNIT	$CODE_ROOT/Stat/Stat.h	4;"	d
MEM_USAGE_UNIT	$CODE_ROOT/include/Stat.h	4;"	d
MergeSortVector	$CODE_ROOT/Sort/Sort.cxx	/^MergeSortVector(Type Left, Type Right, cmp_func this_func)$/;"	f
N	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
N	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
NET_CLUSTER	$CODE_ROOT/Design/Design.h	/^  NET_CLUSTER,$/;"	e	enum:__anon7
NET_CLUSTER	$CODE_ROOT/include/Design.h	/^  NET_CLUSTER,$/;"	e	enum:__anon4
NET_DEGREE_PROPERTY	$CODE_ROOT/Design/Design.h	61;"	d
NET_DEGREE_PROPERTY	$CODE_ROOT/include/Design.h	61;"	d
NET_END_FOR	$CODE_ROOT/Net/NetIter.h	21;"	d
NET_END_FOR	$CODE_ROOT/include/NetIter.h	21;"	d
NET_FOR_ALL_CELLS	$CODE_ROOT/Net/NetIter.h	6;"	d
NET_FOR_ALL_CELLS	$CODE_ROOT/include/NetIter.h	6;"	d
NET_FOR_ALL_PINS	$CODE_ROOT/Net/NetIter.h	14;"	d
NET_FOR_ALL_PINS	$CODE_ROOT/include/NetIter.h	14;"	d
NET_H	$CODE_ROOT/Net/Net.h	6;"	d
NET_H	$CODE_ROOT/include/Net.h	6;"	d
NET_IS_HIDDEN_FLAG	$CODE_ROOT/Flags/Flags.h	/^  NET_IS_HIDDEN_FLAG,$/;"	e	enum:__anon1
NET_IS_HIDDEN_FLAG	$CODE_ROOT/include/Flags.h	/^  NET_IS_HIDDEN_FLAG,$/;"	e	enum:__anon2
NET_ITER_H	$CODE_ROOT/Net/NetIter.h	2;"	d
NET_ITER_H	$CODE_ROOT/include/NetIter.h	2;"	d
NIL	$CODE_ROOT/common/common.h	18;"	d
NIL	$CODE_ROOT/include/common.h	18;"	d
NINE	$CODE_ROOT/Design/Design.h	88;"	d
NINE	$CODE_ROOT/include/Design.h	88;"	d
NODE_ADJACENT_NODE_TABLE_EXT	$CODE_ROOT/Design/DesignAnalysis.cxx	25;"	d	file:
NODE_FLAG_CLEAR	$CODE_ROOT/HyperGraph/Node.h	7;"	d
NODE_FLAG_CLEAR	$CODE_ROOT/include/Node.h	7;"	d
NODE_FLAG_IS_CLUSTER_CHILD	$CODE_ROOT/HyperGraph/Node.h	9;"	d
NODE_FLAG_IS_CLUSTER_CHILD	$CODE_ROOT/include/Node.h	9;"	d
NODE_FLAG_IS_CLUSTER_PARENT	$CODE_ROOT/HyperGraph/Node.h	10;"	d
NODE_FLAG_IS_CLUSTER_PARENT	$CODE_ROOT/include/Node.h	10;"	d
NODE_FLAG_IS_TOP	$CODE_ROOT/HyperGraph/Node.h	8;"	d
NODE_FLAG_IS_TOP	$CODE_ROOT/include/Node.h	8;"	d
NODE_FOR_ALL_ADJACENT_NODES	$CODE_ROOT/HyperGraph/NodeIter.h	12;"	d
NODE_FOR_ALL_EDGES	$CODE_ROOT/HyperGraph/NodeIter.h	4;"	d
NODE_H	$CODE_ROOT/HyperGraph/Node.h	2;"	d
NODE_H	$CODE_ROOT/include/Node.h	2;"	d
NODE_INPUT_TABLE_EXT	$CODE_ROOT/Design/DesignAnalysis.cxx	24;"	d	file:
NODE_ITER_H	$CODE_ROOT/HyperGraph/NodeIter.h	2;"	d
NODE_OUTPUT_TABLE_EXT	$CODE_ROOT/Design/DesignAnalysis.cxx	23;"	d	file:
NODE_TERMINAL_KEYWORD	$CODE_ROOT/Design/Design.h	54;"	d
NODE_TERMINAL_KEYWORD	$CODE_ROOT/include/Design.h	54;"	d
NO_SYMMETRY	$CODE_ROOT/PhysData/PhysRow.h	/^typedef enum {NO_SYMMETRY=1, YES_SYMMETRY} siteSymmetry;$/;"	e	enum:__anon10
NO_SYMMETRY	$CODE_ROOT/include/PhysRow.h	/^typedef enum {NO_SYMMETRY=1, YES_SYMMETRY} siteSymmetry;$/;"	e	enum:__anon6
NUM_FIXED_CELL_PROPERTIES	$CODE_ROOT/Design/Design.h	41;"	d
NUM_FIXED_CELL_PROPERTIES	$CODE_ROOT/include/Design.h	41;"	d
NUM_NETFILE_HEADER_LINES	$CODE_ROOT/Design/Design.h	32;"	d
NUM_NETFILE_HEADER_LINES	$CODE_ROOT/include/Design.h	32;"	d
NUM_NETS_PROPERTY	$CODE_ROOT/Design/Design.h	59;"	d
NUM_NETS_PROPERTY	$CODE_ROOT/include/Design.h	59;"	d
NUM_NET_PROPERTIES	$CODE_ROOT/Design/Design.h	39;"	d
NUM_NET_PROPERTIES	$CODE_ROOT/include/Design.h	39;"	d
NUM_NODEFILE_HEADER_LINES	$CODE_ROOT/Design/Design.h	31;"	d
NUM_NODEFILE_HEADER_LINES	$CODE_ROOT/include/Design.h	31;"	d
NUM_NODES_PROPERTY	$CODE_ROOT/Design/Design.h	52;"	d
NUM_NODES_PROPERTY	$CODE_ROOT/include/Design.h	52;"	d
NUM_NODE_PROPERTIES	$CODE_ROOT/Design/Design.h	38;"	d
NUM_NODE_PROPERTIES	$CODE_ROOT/include/Design.h	38;"	d
NUM_PINS_PROPERTY	$CODE_ROOT/Design/Design.h	60;"	d
NUM_PINS_PROPERTY	$CODE_ROOT/include/Design.h	60;"	d
NUM_ROWS_PROPERTY	$CODE_ROOT/Design/Design.h	66;"	d
NUM_ROWS_PROPERTY	$CODE_ROOT/include/Design.h	66;"	d
NUM_ROW_PROPERTIES	$CODE_ROOT/Design/Design.h	40;"	d
NUM_ROW_PROPERTIES	$CODE_ROOT/include/Design.h	40;"	d
NUM_SCLFILE_HEADER_LINES	$CODE_ROOT/Design/Design.h	33;"	d
NUM_SCLFILE_HEADER_LINES	$CODE_ROOT/include/Design.h	33;"	d
NUM_TERMINALS_PROPERTY	$CODE_ROOT/Design/Design.h	53;"	d
NUM_TERMINALS_PROPERTY	$CODE_ROOT/include/Design.h	53;"	d
Name	$CODE_ROOT/Design/Design.h	/^  string Name;$/;"	m	class:Design
Name	$CODE_ROOT/Pin/Pin.h	/^  string Name;$/;"	m	class:Pin
Name	$CODE_ROOT/include/Design.h	/^  string Name;$/;"	m	class:Design
Name	$CODE_ROOT/include/Pin.h	/^  string Name;$/;"	m	class:Pin
Net	$CODE_ROOT/Net/Net.cxx	/^Net::Net()$/;"	f	class:Net
Net	$CODE_ROOT/Net/Net.cxx	/^Net::Net(int id)$/;"	f	class:Net
Net	$CODE_ROOT/Net/Net.cxx	/^Net::Net(int id, const string& Name)$/;"	f	class:Net
Net	$CODE_ROOT/Net/Net.h	/^class Net {$/;"	c
Net	$CODE_ROOT/include/Net.h	/^class Net {$/;"	c
NetAddPin	$CODE_ROOT/Net/Net.cxx	/^Net::NetAddPin(const Pin& pinToAdd)$/;"	f	class:Net
NetClearAllIsHidden	$CODE_ROOT/Flags/FlagsMain.cxx	/^void NetClearAllIsHidden(Net *netPtr)$/;"	f
NetClearIsHidden	$CODE_ROOT/Flags/FlagsMain.cxx	/^void NetClearIsHidden(Net *netPtr)$/;"	f
NetGetDriverCount	$CODE_ROOT/Net/Net.cxx	/^Net::NetGetDriverCount(void)$/;"	f	class:Net
NetGetId	$CODE_ROOT/Net/Net.cxx	/^Net::NetGetId(void)$/;"	f	class:Net
NetGetLoadCount	$CODE_ROOT/Net/Net.cxx	/^Net::NetGetLoadCount(void)$/;"	f	class:Net
NetGetName	$CODE_ROOT/Net/Net.cxx	/^Net::NetGetName(void)$/;"	f	class:Net
NetGetPinCount	$CODE_ROOT/Net/Net.cxx	/^Net::NetGetPinCount(void)$/;"	f	class:Net
NetGetPins	$CODE_ROOT/Net/Net.cxx	/^map<string, Pin*>& Net::NetGetPins(void)$/;"	f	class:Net
NetGetWeight	$CODE_ROOT/Net/Net.cxx	/^Net::NetGetWeight(void)$/;"	f	class:Net
NetIsHidden	$CODE_ROOT/Flags/FlagsMain.cxx	/^bool NetIsHidden(Net *netPtr)$/;"	f
NetIsUnderCluster	$CODE_ROOT/Net/Net.cxx	/^Net::NetIsUnderCluster(void)$/;"	f	class:Net
NetPtr	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  Net *NetPtr;$/;"	m	struct:NetStatsStruct	file:
NetSetDriverCount	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetDriverCount(unsigned int driverCount)$/;"	f	class:Net
NetSetId	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetId(int id)$/;"	f	class:Net
NetSetIsHidden	$CODE_ROOT/Flags/FlagsMain.cxx	/^void NetSetIsHidden(Net *netPtr)$/;"	f
NetSetIsUnderCluster	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetIsUnderCluster(const bool & isUnderCluster)$/;"	f	class:Net
NetSetLoadCount	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetLoadCount(unsigned int loadCount)$/;"	f	class:Net
NetSetName	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetName(const string& Name)$/;"	f	class:Net
NetSetPinCount	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetPinCount(unsigned int pinCount)$/;"	f	class:Net
NetSetWeight	$CODE_ROOT/Net/Net.cxx	/^Net::NetSetWeight(unsigned int weight)$/;"	f	class:Net
NetStat	$CODE_ROOT/Design/DesignAnalysis.cxx	/^typedef struct NetStatsStruct * NetStat;$/;"	t	typeref:struct:NetStatsStruct	file:
NetStatsStruct	$CODE_ROOT/Design/DesignAnalysis.cxx	/^typedef struct NetStatsStruct NetStatsStruct;$/;"	t	typeref:struct:NetStatsStruct	file:
NetStatsStruct	$CODE_ROOT/Design/DesignAnalysis.cxx	/^typedef struct NetStatsStruct {$/;"	s	file:
NetStatsStruct	$CODE_ROOT/Design/DesignAnalysis.cxx	/^} NetStatsStruct;$/;"	t	typeref:struct:NetStatsStruct	file:
Node	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::Node() $/;"	f	class:Node
Node	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::Node(void *object)$/;"	f	class:Node
Node	$CODE_ROOT/HyperGraph/Node.h	/^class Node {$/;"	c
Node	$CODE_ROOT/include/Node.h	/^class Node {$/;"	c
NodeAddEdge	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeAddEdge(unsigned int edgeIdx)$/;"	f	class:Node
NodeAddEdge	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeAddEdge(unsigned int edgeIdx, edgeType type)$/;"	f	class:Node
NodeClearIsClusterChild	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeClearIsClusterChild(void)$/;"	f	class:Node
NodeClearIsClusterParent	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeClearIsClusterParent(void)$/;"	f	class:Node
NodeClearIsTop	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeClearIsTop(void)$/;"	f	class:Node
NodeGetAnnIdx1	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetAnnIdx1(void)$/;"	f	class:Node
NodeGetAnnIdx2	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetAnnIdx2(void)$/;"	f	class:Node
NodeGetAnnIdx3	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetAnnIdx3(void)$/;"	f	class:Node
NodeGetData	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetData(void)$/;"	f	class:Node
NodeGetFlags	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetFlags(void)$/;"	f	class:Node
NodeGetIdx	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetIdx(void)$/;"	f	class:Node
NodeGetNumEdges	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetNumEdges(void)$/;"	f	class:Node
NodeGetNumInEdges	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetNumInEdges(void)$/;"	f	class:Node
NodeGetNumOutEdges	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeGetNumOutEdges(void)$/;"	f	class:Node
NodeIsClusterChild	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeIsClusterChild(void)$/;"	f	class:Node
NodeIsClusterParent	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeIsClusterParent(void)$/;"	f	class:Node
NodeIsTop	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeIsTop(void)$/;"	f	class:Node
NodeSetAnnIdx1	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetAnnIdx1(unsigned int annIdx1)$/;"	f	class:Node
NodeSetAnnIdx2	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetAnnIdx2(unsigned int annIdx2)$/;"	f	class:Node
NodeSetAnnIdx3	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetAnnIdx3(unsigned int annIdx3)$/;"	f	class:Node
NodeSetData	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetData(void *object)$/;"	f	class:Node
NodeSetFlags	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetFlags(unsigned int flags)$/;"	f	class:Node
NodeSetIdx	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetIdx(unsigned int nodeIdx)$/;"	f	class:Node
NodeSetIsClusterChild	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetIsClusterChild(void)$/;"	f	class:Node
NodeSetIsClusterParent	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetIsClusterParent(void)$/;"	f	class:Node
NodeSetIsTop	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetIsTop(void)$/;"	f	class:Node
NodeSetNumInEdges	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetNumInEdges(unsigned int numInEdges)$/;"	f	class:Node
NodeSetNumOutEdges	$CODE_ROOT/HyperGraph/Node.cxx	/^Node::NodeSetNumOutEdges(unsigned int numOutEdges)$/;"	f	class:Node
Nodes2Edges	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  vector<vector<unsigned int> > Nodes2Edges;$/;"	m	class:HyperGraph
Nodes2Edges	$CODE_ROOT/include/HyperGraph.h	/^  vector<vector<unsigned int> > Nodes2Edges;$/;"	m	class:HyperGraph
NumCells	$CODE_ROOT/Design/Design.h	/^  unsigned int NumCells;$/;"	m	class:Design
NumCells	$CODE_ROOT/include/Design.h	/^  unsigned int NumCells;$/;"	m	class:Design
NumFixedCells	$CODE_ROOT/Design/Design.h	/^  unsigned int NumFixedCells;$/;"	m	class:Design
NumFixedCells	$CODE_ROOT/include/Design.h	/^  unsigned int NumFixedCells;$/;"	m	class:Design
NumNets	$CODE_ROOT/Design/Design.h	/^  unsigned int NumNets;$/;"	m	class:Design
NumNets	$CODE_ROOT/include/Design.h	/^  unsigned int NumNets;$/;"	m	class:Design
NumPhysRows	$CODE_ROOT/Design/Design.h	/^  unsigned int NumPhysRows;$/;"	m	class:Design
NumPhysRows	$CODE_ROOT/include/Design.h	/^  unsigned int NumPhysRows;$/;"	m	class:Design
NumTerminalCells	$CODE_ROOT/Design/Design.h	/^  unsigned int NumTerminalCells;$/;"	m	class:Design
NumTerminalCells	$CODE_ROOT/include/Design.h	/^  unsigned int NumTerminalCells;$/;"	m	class:Design
NumTopCells	$CODE_ROOT/Design/Design.h	/^  unsigned int NumTopCells;$/;"	m	class:Design
NumTopCells	$CODE_ROOT/include/Design.h	/^  unsigned int NumTopCells;$/;"	m	class:Design
NumTopNets	$CODE_ROOT/Design/Design.h	/^  unsigned int NumTopNets;$/;"	m	class:Design
NumTopNets	$CODE_ROOT/include/Design.h	/^  unsigned int NumTopNets;$/;"	m	class:Design
OBJDIR	$CODE_ROOT/Cell/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Design/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Flags/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/HyperGraph/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Net/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/PhysData/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Pin/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Sort/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/Stat/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJDIR	$CODE_ROOT/common/Makefile	/^OBJDIR=$(CODE_ROOT)\/objdir$/;"	m
OBJFILES	$CODE_ROOT/Makefile	/^OBJFILES:= $(OBJDIR)\/*.o$/;"	m
OBJFILES	$CODE_ROOT/Makefile	/^OBJFILES:= $(addprefix $(OBJDIR)\/, $(OBJFILES))$/;"	m
OFILE	$CODE_ROOT/Makefile	/^	OFILE=the_exec$/;"	m
OFILE	$CODE_ROOT/Makefile	/^	OFILE=the_exec-g$/;"	m
OUT_EDGE	$CODE_ROOT/HyperGraph/Node.h	/^  OUT_EDGE$/;"	e	enum:edgeType
OUT_EDGE	$CODE_ROOT/include/Node.h	/^  OUT_EDGE$/;"	e	enum:edgeType
PHYSROW_H	$CODE_ROOT/PhysData/PhysRow.h	2;"	d
PHYSROW_H	$CODE_ROOT/include/PhysRow.h	2;"	d
PIN_DIR_ALL	$CODE_ROOT/Pin/Pin.h	10;"	d
PIN_DIR_ALL	$CODE_ROOT/include/Pin.h	10;"	d
PIN_DIR_INOUT	$CODE_ROOT/Pin/Pin.h	9;"	d
PIN_DIR_INOUT	$CODE_ROOT/include/Pin.h	9;"	d
PIN_DIR_INPUT	$CODE_ROOT/Pin/Pin.h	7;"	d
PIN_DIR_INPUT	$CODE_ROOT/include/Pin.h	7;"	d
PIN_DIR_INPUT_STRING	$CODE_ROOT/Design/Design.h	82;"	d
PIN_DIR_INPUT_STRING	$CODE_ROOT/include/Design.h	82;"	d
PIN_DIR_OUTPUT	$CODE_ROOT/Pin/Pin.h	8;"	d
PIN_DIR_OUTPUT	$CODE_ROOT/include/Pin.h	8;"	d
PIN_DIR_OUTPUT_STRING	$CODE_ROOT/Design/Design.h	83;"	d
PIN_DIR_OUTPUT_STRING	$CODE_ROOT/include/Design.h	83;"	d
PIN_H	$CODE_ROOT/Pin/Pin.h	4;"	d
PIN_H	$CODE_ROOT/include/Pin.h	4;"	d
PROP_HEIGHT	$CODE_ROOT/Design/DesignAnalysis.cxx	19;"	d	file:
PROP_WIDTH	$CODE_ROOT/Design/DesignAnalysis.cxx	20;"	d	file:
ParentCell	$CODE_ROOT/Pin/Pin.h	/^  Cell *ParentCell;$/;"	m	class:Pin
ParentCell	$CODE_ROOT/include/Pin.h	/^  Cell *ParentCell;$/;"	m	class:Pin
PhysRow	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRow(rowOrientation orient)$/;"	f	class:PhysRow
PhysRow	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRow(rowOrientation orient, int coordinate)$/;"	f	class:PhysRow
PhysRow	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRow(rowOrientation orient, int coordinate, unsigned int height)$/;"	f	class:PhysRow
PhysRow	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRow(rowOrientation orient, int coordinate, unsigned int height,$/;"	f	class:PhysRow
PhysRow	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRow(rowOrientation orient, unsigned int height)$/;"	f	class:PhysRow
PhysRow	$CODE_ROOT/PhysData/PhysRow.h	/^class PhysRow {$/;"	c
PhysRow	$CODE_ROOT/include/PhysRow.h	/^class PhysRow {$/;"	c
PhysRowAddSubRow	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowAddSubRow(unsigned int rowOrigin, unsigned int numSites) $/;"	f	class:PhysRow
PhysRowGetCoordinate	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetCoordinate(void)$/;"	f	class:PhysRow
PhysRowGetHeight	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetHeight(void)$/;"	f	class:PhysRow
PhysRowGetNumSubRows	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetNumSubRows(void)$/;"	f	class:PhysRow
PhysRowGetRowTypeFromStr	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRowGetRowTypeFromStr(string rowType)$/;"	f
PhysRowGetSiteOrientation	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetSiteOrientation(void)$/;"	f	class:PhysRow
PhysRowGetSiteSpacing	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetSiteSpacing(void)$/;"	f	class:PhysRow
PhysRowGetSiteSymmetry	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetSiteSymmetry(void)$/;"	f	class:PhysRow
PhysRowGetSiteSymmetryFromStr	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRowGetSiteSymmetryFromStr(string symmetry)$/;"	f
PhysRowGetSiteWidth	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetSiteWidth(void)$/;"	f	class:PhysRow
PhysRowGetSubRows	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetSubRows(void)$/;"	f	class:PhysRow
PhysRowGetType	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowGetType(void)$/;"	f	class:PhysRow
PhysRowIncrementSubRows	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowIncrementSubRows(void)$/;"	f	class:PhysRow
PhysRowSetCoordinate	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetCoordinate(int coordinate)$/;"	f	class:PhysRow
PhysRowSetHeight	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetHeight(unsigned int height)$/;"	f	class:PhysRow
PhysRowSetNumSites	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetNumSites(unsigned int numSites) $/;"	f	class:PhysRow
PhysRowSetNumSubRows	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetNumSubRows(unsigned int numSubRows)$/;"	f	class:PhysRow
PhysRowSetSiteOrientation	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetSiteOrientation(objOrient orient)$/;"	f	class:PhysRow
PhysRowSetSiteSpacing	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetSiteSpacing(unsigned int siteSpacing)$/;"	f	class:PhysRow
PhysRowSetSiteSymmetry	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetSiteSymmetry(siteSymmetry symmetry)$/;"	f	class:PhysRow
PhysRowSetSiteWidth	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetSiteWidth(unsigned int siteWidth)$/;"	f	class:PhysRow
PhysRowSetSubRows	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetSubRows(map<unsigned int, unsigned int> subRows)$/;"	f	class:PhysRow
PhysRowSetType	$CODE_ROOT/PhysData/PhysRow.cxx	/^PhysRow::PhysRowSetType(rowOrientation rowType)$/;"	f	class:PhysRow
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin() $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, const Cell& parentCell) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, const Cell& parentCell, const Net& connectedNet)$/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, const Cell& parentCell, const string& name) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, const string& name) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, char direction) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, char direction, $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, char direction, const Cell& parentCell) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, char direction, const string& name)$/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, const Cell& parentCell) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, const Cell& parentCell, $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.cxx	/^Pin::Pin(int id, int xoffset, int yoffset, const string& name) $/;"	f	class:Pin
Pin	$CODE_ROOT/Pin/Pin.h	/^class Pin {$/;"	c
Pin	$CODE_ROOT/include/Pin.h	/^class Pin {$/;"	c
PinGetDirection	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetDirection(void) const$/;"	f	class:Pin
PinGetId	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetId(void)$/;"	f	class:Pin
PinGetName	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetName(void) const$/;"	f	class:Pin
PinGetNet	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetNet(void)$/;"	f	class:Pin
PinGetParentCell	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetParentCell(void)$/;"	f	class:Pin
PinGetXOffset	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetXOffset(void)$/;"	f	class:Pin
PinGetXposYpos	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetXposYpos(int *xpos, int *ypos)$/;"	f	class:Pin
PinGetYOffset	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinGetYOffset(void)$/;"	f	class:Pin
PinSetDirection	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinSetDirection(char direction)$/;"	f	class:Pin
PinSetId	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinSetId(int id)$/;"	f	class:Pin
PinSetName	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinSetName(string pinName)$/;"	f	class:Pin
PinSetParentCell	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinSetParentCell(const Cell& parentCell)$/;"	f	class:Pin
PinSetXOffset	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinSetXOffset(int xoffset)$/;"	f	class:Pin
PinSetYOffset	$CODE_ROOT/Pin/Pin.cxx	/^Pin::PinSetYOffset(int yoffset)$/;"	f	class:Pin
Pins	$CODE_ROOT/Cell/Cell.h	/^  vector<Pin*> Pins;$/;"	m	class:Cell
Pins	$CODE_ROOT/Net/Net.h	/^  map<string, Pin*> Pins;$/;"	m	class:Net
Pins	$CODE_ROOT/include/Cell.h	/^  vector<Pin*> Pins;$/;"	m	class:Cell
Pins	$CODE_ROOT/include/Net.h	/^  map<string, Pin*> Pins;$/;"	m	class:Net
ROW_BASED_PLACEMENT	$CODE_ROOT/Design/Design.h	46;"	d
ROW_BASED_PLACEMENT	$CODE_ROOT/include/Design.h	46;"	d
ROW_BEGIN_KEYWORD	$CODE_ROOT/Design/Design.h	71;"	d
ROW_BEGIN_KEYWORD	$CODE_ROOT/include/Design.h	71;"	d
ROW_COORDINATE	$CODE_ROOT/Design/Design.h	72;"	d
ROW_COORDINATE	$CODE_ROOT/include/Design.h	72;"	d
ROW_END_KEYWORD	$CODE_ROOT/Design/Design.h	80;"	d
ROW_END_KEYWORD	$CODE_ROOT/include/Design.h	80;"	d
ROW_HEIGHT	$CODE_ROOT/Design/Design.h	73;"	d
ROW_HEIGHT	$CODE_ROOT/include/Design.h	73;"	d
ROW_SITE_ORIENTATION	$CODE_ROOT/Design/Design.h	76;"	d
ROW_SITE_ORIENTATION	$CODE_ROOT/include/Design.h	76;"	d
ROW_SITE_SPACING	$CODE_ROOT/Design/Design.h	75;"	d
ROW_SITE_SPACING	$CODE_ROOT/include/Design.h	75;"	d
ROW_SITE_SYMMETRY	$CODE_ROOT/Design/Design.h	77;"	d
ROW_SITE_SYMMETRY	$CODE_ROOT/include/Design.h	77;"	d
ROW_SITE_WIDTH	$CODE_ROOT/Design/Design.h	74;"	d
ROW_SITE_WIDTH	$CODE_ROOT/include/Design.h	74;"	d
RowBasedPlacement	$CODE_ROOT/Design/Design.h	/^  bool RowBasedPlacement;$/;"	m	class:Design
RowBasedPlacement	$CODE_ROOT/include/Design.h	/^  bool RowBasedPlacement;$/;"	m	class:Design
RowHeights	$CODE_ROOT/Design/Design.h	/^  map<unsigned int, unsigned int>RowHeights;$/;"	m	class:Design
RowHeights	$CODE_ROOT/include/Design.h	/^  map<unsigned int, unsigned int>RowHeights;$/;"	m	class:Design
S	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
S	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
SORT_H	$CODE_ROOT/Sort/Sort.h	2;"	d
SORT_H	$CODE_ROOT/include/Sort.h	2;"	d
SPACES	$CODE_ROOT/Design/DesignAnalysis.cxx	13;"	d	file:
SRCCPPFILES	$CODE_ROOT/Cell/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/Design/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/Flags/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/HyperGraph/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/Net/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/PhysData/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/Pin/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/Sort/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCCPPFILES	$CODE_ROOT/Stat/Makefile	/^SRCCPPFILES:= $(SRCFILES:=.cxx)$/;"	m
SRCDIRS	$CODE_ROOT/Makefile	/^SRCDIRS:= Pin Cell Net Design HyperGraph common Stat PhysData Flags$/;"	m
SRCFILES	$CODE_ROOT/Cell/Makefile	/^SRCFILES:=  Cell$/;"	m
SRCFILES	$CODE_ROOT/Design/Makefile	/^SRCFILES:=  DesignMain DesignUtils DesignRead DesignGraph DesignAnalysis DesignCluster DesignWrite$/;"	m
SRCFILES	$CODE_ROOT/Flags/Makefile	/^SRCFILES:=  FlagsMain FlagsDef$/;"	m
SRCFILES	$CODE_ROOT/HyperGraph/Makefile	/^SRCFILES:=  HyperGraph Node Edge$/;"	m
SRCFILES	$CODE_ROOT/Net/Makefile	/^SRCFILES:=  Net$/;"	m
SRCFILES	$CODE_ROOT/PhysData/Makefile	/^SRCFILES:=  PhysRow$/;"	m
SRCFILES	$CODE_ROOT/Pin/Makefile	/^SRCFILES:= Pin$/;"	m
SRCFILES	$CODE_ROOT/Sort/Makefile	/^SRCFILES:=  Sort$/;"	m
SRCFILES	$CODE_ROOT/Stat/Makefile	/^SRCFILES:=  Stat$/;"	m
STAT_H	$CODE_ROOT/Stat/Stat.h	2;"	d
STAT_H	$CODE_ROOT/include/Stat.h	2;"	d
STAT_H	$CODE_ROOT/stat/stat.h	2;"	d
STD_CELL_BASED_PLACEMENT	$CODE_ROOT/Design/Design.h	47;"	d
STD_CELL_BASED_PLACEMENT	$CODE_ROOT/include/Design.h	47;"	d
STD_CELL_HEIGHT	$CODE_ROOT/Design/DesignIter.h	6;"	d
STD_CELL_HEIGHT	$CODE_ROOT/include/DesignIter.h	6;"	d
SUBROW_NUM_SITES	$CODE_ROOT/Design/Design.h	79;"	d
SUBROW_NUM_SITES	$CODE_ROOT/include/Design.h	79;"	d
SUBROW_ORIGIN	$CODE_ROOT/Design/Design.h	78;"	d
SUBROW_ORIGIN	$CODE_ROOT/include/Design.h	78;"	d
TARGETS	$CODE_ROOT/Makefile	/^TARGETS = all debug$/;"	m
TOP_LEVEL_TABLE_EXT	$CODE_ROOT/Design/DesignAnalysis.cxx	22;"	d	file:
TOTAL_CLUSTERING_TECHNIQUES	$CODE_ROOT/Design/Design.h	/^  TOTAL_CLUSTERING_TECHNIQUES,$/;"	e	enum:__anon7
TOTAL_CLUSTERING_TECHNIQUES	$CODE_ROOT/include/Design.h	/^  TOTAL_CLUSTERING_TECHNIQUES,$/;"	e	enum:__anon4
TOTAL_NUM_FLAGS	$CODE_ROOT/Flags/Flags.h	/^  TOTAL_NUM_FLAGS$/;"	e	enum:__anon1
TOTAL_NUM_FLAGS	$CODE_ROOT/include/Flags.h	/^  TOTAL_NUM_FLAGS$/;"	e	enum:__anon2
VECTOR_FOR_ALL_ELEMS	$CODE_ROOT/common/commonIter.h	6;"	d
VECTOR_FOR_ALL_ELEMS	$CODE_ROOT/include/commonIter.h	6;"	d
VECTOR_FOR_ALL_ELEMS_DOUBLE	$CODE_ROOT/common/commonIter.h	11;"	d
VECTOR_FOR_ALL_ELEMS_DOUBLE	$CODE_ROOT/include/commonIter.h	11;"	d
VERTICAL	$CODE_ROOT/PhysData/PhysRow.h	/^typedef enum {VERTICAL,HORIZONTAL} rowOrientation;$/;"	e	enum:__anon9
VERTICAL	$CODE_ROOT/include/PhysRow.h	/^typedef enum {VERTICAL,HORIZONTAL} rowOrientation;$/;"	e	enum:__anon5
W	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon8
W	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	e	enum:__anon3
YES_SYMMETRY	$CODE_ROOT/PhysData/PhysRow.h	/^typedef enum {NO_SYMMETRY=1, YES_SYMMETRY} siteSymmetry;$/;"	e	enum:__anon10
YES_SYMMETRY	$CODE_ROOT/include/PhysRow.h	/^typedef enum {NO_SYMMETRY=1, YES_SYMMETRY} siteSymmetry;$/;"	e	enum:__anon6
ZERO	$CODE_ROOT/Design/Design.h	87;"	d
ZERO	$CODE_ROOT/include/Design.h	87;"	d
_ASSERT	$CODE_ROOT/common/common.h	23;"	d
_ASSERT	$CODE_ROOT/include/common.h	23;"	d
_ASSERT_TRUE	$CODE_ROOT/common/common.h	28;"	d
_ASSERT_TRUE	$CODE_ROOT/include/common.h	28;"	d
_DEBUG_MSG	$CODE_ROOT/common/common.h	55;"	d
_DEBUG_MSG	$CODE_ROOT/include/common.h	55;"	d
_STEP_BEGIN	$CODE_ROOT/common/common.h	39;"	d
_STEP_BEGIN	$CODE_ROOT/include/common.h	39;"	d
_STEP_END	$CODE_ROOT/common/common.h	47;"	d
_STEP_END	$CODE_ROOT/include/common.h	47;"	d
_WRITE_HEADER	$CODE_ROOT/Design/DesignWrite.cxx	3;"	d	file:
_WRITE_TABLE	$CODE_ROOT/Design/DesignAnalysis.cxx	30;"	d	file:
_setNULL	$CODE_ROOT/common/common.h	20;"	d
_setNULL	$CODE_ROOT/include/common.h	20;"	d
add_escapes	$CODE_ROOT/gprof2html.py	/^def add_escapes(input):$/;"	f
annIdx1	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned int annIdx1;$/;"	m	class:Node
annIdx1	$CODE_ROOT/include/Node.h	/^  unsigned int annIdx1;$/;"	m	class:Node
annIdx2	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned int annIdx2;$/;"	m	class:Node
annIdx2	$CODE_ROOT/include/Node.h	/^  unsigned int annIdx2;$/;"	m	class:Node
annIdx3	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned int annIdx3;$/;"	m	class:Node
annIdx3	$CODE_ROOT/include/Node.h	/^  unsigned int annIdx3;$/;"	m	class:Node
areaMacroRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, unsigned int>areaMacroRanges;$/;"	v
areaStdRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, unsigned int>areaStdRanges;$/;"	v
aspectRatioAllMacroRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<double, unsigned int> aspectRatioAllMacroRanges; $/;"	v
aspectRatioMacroRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, map<double, unsigned int > > aspectRatioMacroRanges; $/;"	v
childCells	$CODE_ROOT/Cell/Cell.h	/^  vector<Cell*> childCells;$/;"	m	class:Cell
childCells	$CODE_ROOT/include/Cell.h	/^  vector<Cell*> childCells;$/;"	m	class:Cell
clearDirty	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::clearDirty(void)$/;"	f	class:HyperGraph
clusterLevel	$CODE_ROOT/Cell/Cell.h	/^  unsigned int clusterLevel;$/;"	m	class:Cell
clusterLevel	$CODE_ROOT/include/Cell.h	/^  unsigned int clusterLevel;$/;"	m	class:Cell
clusterNodes	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::clusterNodes(vector<unsigned int>& nodeSet, void* object,$/;"	f	class:HyperGraph
clusterNumber	$CODE_ROOT/Design/DesignCluster.cxx	/^static unsigned int clusterNumber;$/;"	v	file:
clusteringType	$CODE_ROOT/Design/Design.h	/^} clusteringType;$/;"	t	typeref:enum:__anon7
clusteringType	$CODE_ROOT/include/Design.h	/^} clusteringType;$/;"	t	typeref:enum:__anon4
common_error	$CODE_ROOT/common/common_utils.cxx	/^common_error(std::string ErrorString)$/;"	f
common_message	$CODE_ROOT/common/common_utils.cxx	/^common_message(std::string MessageString)$/;"	f
convertDesignToGraph	$CODE_ROOT/main.cxx	/^HyperGraph& convertDesignToGraph(Design& thisDesign)$/;"	f
coordinate	$CODE_ROOT/PhysData/PhysRow.h	/^  int coordinate;$/;"	m	class:PhysRow
coordinate	$CODE_ROOT/include/PhysRow.h	/^  int coordinate;$/;"	m	class:PhysRow
createNetStats	$CODE_ROOT/Design/DesignAnalysis.cxx	/^createNetStats()$/;"	f
data	$CODE_ROOT/HyperGraph/Node.h	/^  void *data;$/;"	m	class:Node
data	$CODE_ROOT/include/Node.h	/^  void *data;$/;"	m	class:Node
debug	$CODE_ROOT/variables.cxx	/^bool debug=false;$/;"	v
default_cmp_func	$CODE_ROOT/Sort/Sort.cxx	/^bool default_cmp_func(vector<Type> &thisVector, unsigned int idx1, unsigned int idx2)$/;"	f
dir	$CODE_ROOT/Pin/Pin.h	/^  char dir; $/;"	m	class:Pin
dir	$CODE_ROOT/include/Pin.h	/^  char dir; $/;"	m	class:Pin
dirtyGraph	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  bool dirtyGraph;$/;"	m	class:HyperGraph
dirtyGraph	$CODE_ROOT/include/HyperGraph.h	/^  bool dirtyGraph;$/;"	m	class:HyperGraph
driverCount	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  unsigned int driverCount;$/;"	m	struct:NetStatsStruct	file:
driverCount	$CODE_ROOT/Net/Net.h	/^  unsigned int driverCount;$/;"	m	class:Net
driverCount	$CODE_ROOT/include/Net.h	/^  unsigned int driverCount;$/;"	m	class:Net
dround	$CODE_ROOT/common/common_utils.cxx	/^double dround(double thisDouble)$/;"	f
edgeIdx	$CODE_ROOT/HyperGraph/Edge.h	/^  unsigned int edgeIdx;$/;"	m	class:Edge
edgeIdx	$CODE_ROOT/include/Edge.h	/^  unsigned int edgeIdx;$/;"	m	class:Edge
edgeType	$CODE_ROOT/HyperGraph/Node.h	/^typedef enum edgeType {$/;"	g
edgeType	$CODE_ROOT/HyperGraph/Node.h	/^} edgeType;$/;"	t	typeref:enum:edgeType
edgeType	$CODE_ROOT/include/Node.h	/^typedef enum edgeType {$/;"	g
edgeType	$CODE_ROOT/include/Node.h	/^} edgeType;$/;"	t	typeref:enum:edgeType
flagType	$CODE_ROOT/Flags/Flags.h	/^} flagType;$/;"	t	typeref:enum:__anon1
flagType	$CODE_ROOT/include/Flags.h	/^} flagType;$/;"	t	typeref:enum:__anon2
flags	$CODE_ROOT/Cell/Cell.h	/^  unsigned long flags;$/;"	m	class:Cell
flags	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned char flags;$/;"	m	class:Node
flags	$CODE_ROOT/include/Cell.h	/^  unsigned long flags;$/;"	m	class:Cell
flags	$CODE_ROOT/include/Node.h	/^  unsigned char flags;$/;"	m	class:Node
getCPUTime	$CODE_ROOT/Stat/Stat.cxx	/^double getCPUTime() {$/;"	f
getConnectedIndices	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::getConnectedIndices(unsigned int nodeIdx)$/;"	f	class:HyperGraph
getEdgeWeight	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::getEdgeWeight(unsigned int edgeIdx)$/;"	f	class:HyperGraph
getMemUsage	$CODE_ROOT/Stat/Stat.cxx	/^double getMemUsage() { \/\/Note: this value is in KB!$/;"	f
getMemUsage	$CODE_ROOT/stat/stat.cxx	/^unsigned long getMemUsage(void)$/;"	f
getNewEdgeIdx	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::getNewEdgeIdx(void)$/;"	f	class:HyperGraph
getNewNodeIdx	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::getNewNodeIdx(void)$/;"	f	class:HyperGraph
getNodeConnectivity	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::getNodeConnectivity(unsigned int nodeIdx)$/;"	f	class:HyperGraph
getOrientationFromStr	$CODE_ROOT/common/common_utils.cxx	/^getOrientationFromStr(string orient)$/;"	f
getStrFromInt	$CODE_ROOT/common/common_utils.cxx	/^getStrFromInt(int thisInt)$/;"	f
getStrFromInt	$CODE_ROOT/common/utils.cxx	/^getStrFromInt(int thisInt)$/;"	f
getWidthAndHeight	$CODE_ROOT/Design/DesignCluster.cxx	/^getWidthAndHeight(vector<void*>listOfCells, double aspectRatio,$/;"	f
graphUpdate	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::graphUpdate(void)$/;"	f	class:HyperGraph
height	$CODE_ROOT/Cell/Cell.h	/^  int height;$/;"	m	class:Cell
height	$CODE_ROOT/PhysData/PhysRow.h	/^  unsigned int height;$/;"	m	class:PhysRow
height	$CODE_ROOT/include/Cell.h	/^  int height;$/;"	m	class:Cell
height	$CODE_ROOT/include/PhysRow.h	/^  unsigned int height;$/;"	m	class:PhysRow
heightMacroRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, unsigned int>heightMacroRanges;$/;"	v
heightStdRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, unsigned int>heightStdRanges;$/;"	v
idx2Edge	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  map<unsigned int, Edge *> idx2Edge;$/;"	m	class:HyperGraph
idx2Edge	$CODE_ROOT/include/HyperGraph.h	/^  map<unsigned int, Edge *> idx2Edge;$/;"	m	class:HyperGraph
idx2Node	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  map<unsigned int, Node *> idx2Node;$/;"	m	class:HyperGraph
idx2Node	$CODE_ROOT/include/HyperGraph.h	/^  map<unsigned int, Node *> idx2Node;$/;"	m	class:HyperGraph
inEdges	$CODE_ROOT/HyperGraph/Node.h	/^  vector<unsigned int>inEdges;$/;"	m	class:Node
inEdges	$CODE_ROOT/include/Node.h	/^  vector<unsigned int>inEdges;$/;"	m	class:Node
isCluster	$CODE_ROOT/Cell/Cell.h	/^  bool isCluster;$/;"	m	class:Cell
isCluster	$CODE_ROOT/include/Cell.h	/^  bool isCluster;$/;"	m	class:Cell
isClusterChild	$CODE_ROOT/Cell/Cell.h	/^  bool isClusterChild;$/;"	m	class:Cell
isClusterChild	$CODE_ROOT/include/Cell.h	/^  bool isClusterChild;$/;"	m	class:Cell
isClustered	$CODE_ROOT/Cell/Cell.h	/^  bool isClustered;$/;"	m	class:Cell
isClustered	$CODE_ROOT/include/Cell.h	/^  bool isClustered;$/;"	m	class:Cell
isFixed	$CODE_ROOT/Cell/Cell.h	/^  bool isFixed;$/;"	m	class:Cell
isFixed	$CODE_ROOT/include/Cell.h	/^  bool isFixed;$/;"	m	class:Cell
isMacro	$CODE_ROOT/Cell/Cell.h	/^  bool isMacro;$/;"	m	class:Cell
isMacro	$CODE_ROOT/include/Cell.h	/^  bool isMacro;$/;"	m	class:Cell
isUnderCluster	$CODE_ROOT/Net/Net.h	/^  bool isUnderCluster;$/;"	m	class:Net
isUnderCluster	$CODE_ROOT/include/Net.h	/^  bool isUnderCluster;$/;"	m	class:Net
loadCount	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  unsigned int loadCount;$/;"	m	struct:NetStatsStruct	file:
loadCount	$CODE_ROOT/Net/Net.h	/^  unsigned int loadCount;$/;"	m	class:Net
loadCount	$CODE_ROOT/include/Net.h	/^  unsigned int loadCount;$/;"	m	class:Net
macroCellEps	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  unsigned int macroCellEps;$/;"	m	struct:NetStatsStruct	file:
main	$CODE_ROOT/Design/temp.cxx	/^int main(int argc, char *argv[])$/;"	f
main	$CODE_ROOT/gprof2html.py	/^def main():$/;"	f
main	$CODE_ROOT/main.cxx	/^int main(int argc, char *argv[])$/;"	f
mapOfVectors	$CODE_ROOT/HyperGraph/HyperGraph.h	/^typedef std::map<unsigned int, std::vector<unsigned int > > mapOfVectors;$/;"	t
mapOfVectors	$CODE_ROOT/include/HyperGraph.h	/^typedef std::map<unsigned int, std::vector<unsigned int > > mapOfVectors;$/;"	t
name	$CODE_ROOT/Cell/Cell.h	/^  string name;$/;"	m	class:Cell
name	$CODE_ROOT/Net/Net.h	/^  string name;$/;"	m	class:Net
name	$CODE_ROOT/include/Cell.h	/^  string name;$/;"	m	class:Cell
name	$CODE_ROOT/include/Net.h	/^  string name;$/;"	m	class:Net
netStats	$CODE_ROOT/Design/DesignAnalysis.cxx	/^vector<NetStat> netStats;$/;"	v
nodeClearIsClusterChild	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeClearIsClusterChild(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeClearIsClusterParent	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeClearIsClusterParent(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeClearIsTop	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeClearIsTop(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeConnectivity	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  vector<unsigned int> nodeConnectivity;$/;"	m	class:HyperGraph
nodeConnectivity	$CODE_ROOT/include/HyperGraph.h	/^  vector<unsigned int> nodeConnectivity;$/;"	m	class:HyperGraph
nodeIdx	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned int nodeIdx;$/;"	m	class:Node
nodeIdx	$CODE_ROOT/include/Node.h	/^  unsigned int nodeIdx;$/;"	m	class:Node
nodeIsClusterChild	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeIsClusterChild(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeIsClusterParent	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeIsClusterParent(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeIsTop	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeIsTop(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeSet	$CODE_ROOT/HyperGraph/Edge.h	/^  vector<unsigned int> nodeSet;$/;"	m	class:Edge
nodeSet	$CODE_ROOT/include/Edge.h	/^  vector<unsigned int> nodeSet;$/;"	m	class:Edge
nodeSetIsClusterChild	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeSetIsClusterChild(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeSetIsClusterParent	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeSetIsClusterParent(unsigned int nodeIdx)$/;"	f	class:HyperGraph
nodeSetIsTop	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::nodeSetIsTop(unsigned int nodeIdx)$/;"	f	class:HyperGraph
numCells	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numCells;$/;"	v
numEdges	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  unsigned int numEdges;$/;"	m	class:HyperGraph
numEdges	$CODE_ROOT/include/HyperGraph.h	/^  unsigned int numEdges;$/;"	m	class:HyperGraph
numFixedCells	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numFixedCells;$/;"	v
numFixedMacros	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numFixedMacros;$/;"	v
numInEdges	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned int numInEdges;$/;"	m	class:Node
numInEdges	$CODE_ROOT/include/Node.h	/^  unsigned int numInEdges;$/;"	m	class:Node
numInPins	$CODE_ROOT/Cell/Cell.h	/^  int numInPins;$/;"	m	class:Cell
numInPins	$CODE_ROOT/include/Cell.h	/^  int numInPins;$/;"	m	class:Cell
numMacroCells	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numMacroCells;$/;"	v
numNets	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numNets;$/;"	v
numNodes	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  unsigned int numNodes;$/;"	m	class:HyperGraph
numNodes	$CODE_ROOT/include/HyperGraph.h	/^  unsigned int numNodes;$/;"	m	class:HyperGraph
numOutEdges	$CODE_ROOT/HyperGraph/Node.h	/^  unsigned int numOutEdges;$/;"	m	class:Node
numOutEdges	$CODE_ROOT/include/Node.h	/^  unsigned int numOutEdges;$/;"	m	class:Node
numOutPins	$CODE_ROOT/Cell/Cell.h	/^  int numOutPins;$/;"	m	class:Cell
numOutPins	$CODE_ROOT/include/Cell.h	/^  int numOutPins;$/;"	m	class:Cell
numPhysRows	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numPhysRows;$/;"	v
numPins	$CODE_ROOT/Cell/Cell.h	/^  int numPins;$/;"	m	class:Cell
numPins	$CODE_ROOT/include/Cell.h	/^  int numPins;$/;"	m	class:Cell
numSites	$CODE_ROOT/PhysData/PhysRow.h	/^  unsigned int numSites;$/;"	m	class:PhysRow
numSites	$CODE_ROOT/include/PhysRow.h	/^  unsigned int numSites;$/;"	m	class:PhysRow
numStdCells	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numStdCells;$/;"	v
numSubRows	$CODE_ROOT/PhysData/PhysRow.h	/^  unsigned int numSubRows;$/;"	m	class:PhysRow
numSubRows	$CODE_ROOT/include/PhysRow.h	/^  unsigned int numSubRows;$/;"	m	class:PhysRow
numTerminalCells	$CODE_ROOT/Design/DesignAnalysis.cxx	/^unsigned int numTerminalCells;$/;"	v
obj2idx	$CODE_ROOT/HyperGraph/HyperGraph.h	/^  map<void *, unsigned int> obj2idx;$/;"	m	class:HyperGraph
obj2idx	$CODE_ROOT/include/HyperGraph.h	/^  map<void *, unsigned int> obj2idx;$/;"	m	class:HyperGraph
objOrient	$CODE_ROOT/common/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	t	typeref:enum:__anon8
objOrient	$CODE_ROOT/include/common.h	/^typedef enum {N, E, S, W, FN, FE, FS, FW} objOrient;$/;"	t	typeref:enum:__anon3
object	$CODE_ROOT/HyperGraph/Edge.h	/^  void *object;$/;"	m	class:Edge
object	$CODE_ROOT/include/Edge.h	/^  void *object;$/;"	m	class:Edge
orient	$CODE_ROOT/Cell/Cell.h	/^  objOrient orient;$/;"	m	class:Cell
orient	$CODE_ROOT/include/Cell.h	/^  objOrient orient;$/;"	m	class:Cell
outEdges	$CODE_ROOT/HyperGraph/Node.h	/^  vector<unsigned int>outEdges;$/;"	m	class:Node
outEdges	$CODE_ROOT/include/Node.h	/^  vector<unsigned int>outEdges;$/;"	m	class:Node
parseLine	$CODE_ROOT/Stat/Stat.cxx	/^int parseLine(char* line){$/;"	f
performNetHidingConsistency	$CODE_ROOT/variables.cxx	/^bool performNetHidingConsistency=false;$/;"	v
pinCount	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  unsigned int pinCount;$/;"	m	struct:NetStatsStruct	file:
pinCount	$CODE_ROOT/Net/Net.h	/^  unsigned int pinCount;$/;"	m	class:Net
pinCount	$CODE_ROOT/include/Net.h	/^  unsigned int pinCount;$/;"	m	class:Net
rowOrientation	$CODE_ROOT/PhysData/PhysRow.h	/^typedef enum {VERTICAL,HORIZONTAL} rowOrientation;$/;"	t	typeref:enum:__anon9
rowOrientation	$CODE_ROOT/include/PhysRow.h	/^typedef enum {VERTICAL,HORIZONTAL} rowOrientation;$/;"	t	typeref:enum:__anon5
rowType	$CODE_ROOT/PhysData/PhysRow.h	/^  rowOrientation rowType;$/;"	m	class:PhysRow
rowType	$CODE_ROOT/include/PhysRow.h	/^  rowOrientation rowType;$/;"	m	class:PhysRow
setDirty	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::setDirty(void)$/;"	f	class:HyperGraph
singleRowHeight	$CODE_ROOT/Design/Design.h	/^  unsigned int singleRowHeight;$/;"	m	class:Design
singleRowHeight	$CODE_ROOT/include/Design.h	/^  unsigned int singleRowHeight;$/;"	m	class:Design
siteOrient	$CODE_ROOT/PhysData/PhysRow.h	/^  objOrient siteOrient;$/;"	m	class:PhysRow
siteOrient	$CODE_ROOT/include/PhysRow.h	/^  objOrient siteOrient;$/;"	m	class:PhysRow
siteSpacing	$CODE_ROOT/PhysData/PhysRow.h	/^  unsigned int siteSpacing;$/;"	m	class:PhysRow
siteSpacing	$CODE_ROOT/include/PhysRow.h	/^  unsigned int siteSpacing;$/;"	m	class:PhysRow
siteSym	$CODE_ROOT/PhysData/PhysRow.h	/^  siteSymmetry siteSym;$/;"	m	class:PhysRow
siteSym	$CODE_ROOT/include/PhysRow.h	/^  siteSymmetry siteSym;$/;"	m	class:PhysRow
siteSymmetry	$CODE_ROOT/PhysData/PhysRow.h	/^typedef enum {NO_SYMMETRY=1, YES_SYMMETRY} siteSymmetry;$/;"	t	typeref:enum:__anon10
siteSymmetry	$CODE_ROOT/include/PhysRow.h	/^typedef enum {NO_SYMMETRY=1, YES_SYMMETRY} siteSymmetry;$/;"	t	typeref:enum:__anon6
siteWidth	$CODE_ROOT/PhysData/PhysRow.h	/^  unsigned int siteWidth;$/;"	m	class:PhysRow
siteWidth	$CODE_ROOT/include/PhysRow.h	/^  unsigned int siteWidth;$/;"	m	class:PhysRow
sortCmpFunc	$CODE_ROOT/Design/DesignAnalysis.cxx	/^bool sortCmpFunc (NetStat obj1, NetStat obj2) {$/;"	f
stdCellEps	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  unsigned int stdCellEps;$/;"	m	struct:NetStatsStruct	file:
stepDepth	$CODE_ROOT/variables.cxx	/^unsigned int stepDepth;$/;"	v
subRows	$CODE_ROOT/PhysData/PhysRow.h	/^  map<unsigned int,unsigned int> subRows;$/;"	m	class:PhysRow
subRows	$CODE_ROOT/include/PhysRow.h	/^  map<unsigned int,unsigned int> subRows;$/;"	m	class:PhysRow
terminalCell	$CODE_ROOT/Cell/Cell.h	/^  bool terminalCell;$/;"	m	class:Cell
terminalCell	$CODE_ROOT/include/Cell.h	/^  bool terminalCell;$/;"	m	class:Cell
terminalCellEps	$CODE_ROOT/Design/DesignAnalysis.cxx	/^  unsigned int terminalCellEps;$/;"	m	struct:NetStatsStruct	file:
testClustering	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::testClustering(void)$/;"	f	class:HyperGraph
unclusterNode	$CODE_ROOT/HyperGraph/HyperGraph.cxx	/^HyperGraph::unclusterNode(unsigned int clusterNodeIdx)$/;"	f	class:HyperGraph
updateCellOutputs	$CODE_ROOT/Design/DesignAnalysis.cxx	/^updateCellOutputs(Cell *CellPtr, unsigned int numOutputs) $/;"	f
updateNetStats	$CODE_ROOT/Design/DesignAnalysis.cxx	/^updateNetStats(Net *NetPtr, NetStat thisNetStat)$/;"	f
vectorRemoveDuplicates	$CODE_ROOT/common/common_utils.cxx	/^void vectorRemoveDuplicates(vector<unsigned int>& vec)$/;"	f
weight	$CODE_ROOT/HyperGraph/Edge.h	/^  unsigned int weight;$/;"	m	class:Edge
weight	$CODE_ROOT/Net/Net.h	/^  unsigned int weight;$/;"	m	class:Net
weight	$CODE_ROOT/include/Edge.h	/^  unsigned int weight;$/;"	m	class:Edge
weight	$CODE_ROOT/include/Net.h	/^  unsigned int weight;$/;"	m	class:Net
width	$CODE_ROOT/Cell/Cell.h	/^  int width;$/;"	m	class:Cell
width	$CODE_ROOT/include/Cell.h	/^  int width;$/;"	m	class:Cell
widthMacroRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, unsigned int>widthMacroRanges;$/;"	v
widthStdRanges	$CODE_ROOT/Design/DesignAnalysis.cxx	/^map<unsigned int, unsigned int>widthStdRanges;$/;"	v
x	$CODE_ROOT/Cell/Cell.h	/^  int x;$/;"	m	class:Cell
x	$CODE_ROOT/include/Cell.h	/^  int x;$/;"	m	class:Cell
xOffset	$CODE_ROOT/Pin/Pin.h	/^  int xOffset;$/;"	m	class:Pin
xOffset	$CODE_ROOT/include/Pin.h	/^  int xOffset;$/;"	m	class:Pin
y	$CODE_ROOT/Cell/Cell.h	/^  int y;$/;"	m	class:Cell
y	$CODE_ROOT/include/Cell.h	/^  int y;$/;"	m	class:Cell
yOffset	$CODE_ROOT/Pin/Pin.h	/^  int yOffset;$/;"	m	class:Pin
yOffset	$CODE_ROOT/include/Pin.h	/^  int yOffset;$/;"	m	class:Pin
