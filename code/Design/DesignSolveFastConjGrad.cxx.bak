# include <Design.h>

inline 
double tFunc(uint L1, uint R1, uint L2, uint R2)
{
  uint left, right;
  double overlap;

  right = R2;
  if (R1 < R2) right = R1;
  left = L2;
  if (L1 > L2) left = L1;

  overlap = (int)(right - left);
  if (overlap < 0) overlap = 0.0;

  return (overlap);
}

void
getObjFuncInConjGradFormat(Design &myDesign, HyperGraph &myGraph,
			   vector<Cell *> &inputCells, 
			   SpMat **matX, SpMat **matY, 
			   double **bx, double **by,
			   double &constantx, double &constanty,
			   map<Cell *, uint>& quadMap,
			   map<Cell *, uint>& linMap,
			   Env &DesignEnv)
{
  vector<uint> subi_vecx, subj_vecx, sub_vecx;
  vector<uint> subi_vecy, subj_vecy, sub_vecy;
  vector<double> valij_vecx, val_vecx;
  vector<double> valij_vecy, val_vecy;
  uint numVars, i;
  ofstream hessDumpFile;
  ofstream bMatDumpFile;
  EnvNetModel netModel = DesignEnv.EnvGetNetModel();

  if (netModel == ENV_CLIQUE_MODEL) {
    getObjectiveCliqueModelXY(myDesign, myGraph, inputCells, 
			      subi_vecx, subj_vecx, valij_vecx, 
			      sub_vecx, val_vecx, 
			      subi_vecy, subj_vecy, valij_vecy, 
			      sub_vecy, val_vecy, 
			      constantx, constanty, quadMap, linMap);
  } else if (netModel == ENV_STAR_MODEL) {
    getObjectiveStarModelXY(myDesign, myGraph, inputCells, 
			      subi_vecx, subj_vecx, valij_vecx, 
			      sub_vecx, val_vecx, 
			      subi_vecy, subj_vecy, valij_vecy, 
			      sub_vecy, val_vecy, 
			      constantx, constanty, quadMap, linMap);
  }    
  numVars = inputCells.size();
  *matX = new SpMat(subi_vecx, subj_vecx, valij_vecx);
  *matY = new SpMat(subi_vecy, subj_vecy, valij_vecy);
  *bx = (double *) malloc(sizeof(double) * numVars);
  *by = (double *) malloc(sizeof(double) * numVars);
  
  for (i = 0; i < numVars; i++) {
    (*bx)[i] = 0.0;
    (*by)[i] = 0.0;
  }
  for (i = 0; i < sub_vecx.size(); i++) {
    (*bx)[sub_vecx[i]] = -val_vecx[i];
  }
  for (i = 0; i < sub_vecy.size(); i++) {
    (*by)[sub_vecy[i]] = -val_vecy[i];
  }

  /* Dump the hessian and the constant matrices into a file */
  if (DesignEnv.EnvGetDumpHessian()) {
    string hessDir, hessFile, bMatFile;
    hessDir = "SolverTest/" + DesignEnv.EnvGetDesignName();
    if (!dirExists(hessDir)) {
      if (!(0 == mkdir(hessDir.data(), S_IRWXU | S_IRWXG | S_IRWXO))) {
	cout << "Error: Directory does not exist. Cannot create directory!!" << endl;
	exit(0);
      }
    }
    hessFile = hessDir + "/hessianx";
    if (DesignEnv.EnvGetNetModel() == ENV_STAR_MODEL) {
      hessFile = hessFile + "star";
    } else if (DesignEnv.EnvGetNetModel() == ENV_CLIQUE_MODEL) {
      hessFile = hessFile + "clique";
    }
    hessFile += ".txt";
    hessDumpFile.open(hessFile.data());
    uint numNonZero;
    numNonZero = valij_vecx.size();
    for (uint i = 0; i < numNonZero; i++) {
      hessDumpFile << subi_vecx[i] << " " << subj_vecx[i] << " " << valij_vecx[i] << endl;
    }
    hessDumpFile.close();

    hessFile = hessDir + "/hessiany";
    if (DesignEnv.EnvGetNetModel() == ENV_STAR_MODEL) {
      hessFile = hessFile + "star";
    } else if (DesignEnv.EnvGetNetModel() == ENV_CLIQUE_MODEL) {
      hessFile = hessFile + "clique";
    }
    hessFile += ".txt";
    hessDumpFile.open(hessFile.data());
    numNonZero = valij_vecx.size();
    for (uint i = 0; i < numNonZero; i++) {
      hessDumpFile << subi_vecy[i] << " " << subj_vecy[i] << " " << valij_vecy[i] << endl;
    }
    hessDumpFile.close();

    bMatFile = hessDir + "/bmatx";
    if (DesignEnv.EnvGetNetModel() == ENV_STAR_MODEL) {
      bMatFile = bMatFile + "star";
    } else if (DesignEnv.EnvGetNetModel() == ENV_CLIQUE_MODEL) {
      bMatFile = bMatFile + "clique";
    }
    bMatFile += ".txt";
    bMatDumpFile.open(bMatFile.data());
    numNonZero = val_vecx.size();
    for (uint i = 0; i < numNonZero; i++) {
      bMatDumpFile << sub_vecx[i] << " " << val_vecx[i] << endl;
    }
    bMatDumpFile.close();

    bMatFile = hessDir + "/bmaty";
    if (DesignEnv.EnvGetNetModel() == ENV_STAR_MODEL) {
      bMatFile = bMatFile + "star";
    } else if (DesignEnv.EnvGetNetModel() == ENV_CLIQUE_MODEL) {
      bMatFile = bMatFile + "clique";
    }
    bMatFile += ".txt";
    bMatDumpFile.open(bMatFile.data());
    numNonZero = val_vecy.size();
    for (uint i = 0; i < numNonZero; i++) {
      bMatDumpFile << sub_vecy[i] << " " << val_vecy[i] << endl;
    }
    bMatDumpFile.close();
  }
}

void
DesignAddSpreadForcesConjGrad(Design &myDesign,
			      vector<Cell *> inputCells, 
			      vector<double> pseudoPinXVec,
			      vector<double> pseudoPinYVec,
			      vector<double> springConstantVec,
			      map<Cell *, uint> &quadMap,
			      map<Cell *, uint> &linMap,
			      map<uint, double> &quadMapX,
			      map<uint, double> &quadMapY,
			      map<uint, double> &linMapX,
			      map<uint, double> &linMapY,
			      SpMat &matX, SpMat &matY,
			      double *bx, double *by, 
			      bool ILR)
{
  Cell *cellPtr;
  map<Cell *, uint>::iterator quadMapItr;
  map<Cell *, uint>::iterator linMapItr;
  double cellXpos, cellYpos;
  double pseudoPinX, pseudoPinY;
  double springConstant;
  double coeffX, coeffY;
  double linX, linY;
  uint quadCellIdx, linCellIdx;
  uint i, numVars;

  _STEP_BEGIN("Perform cell spreading");
  numVars = inputCells.size();
  for (i = 0; i < numVars; i++) {
    cellPtr = (Cell *)inputCells[i];
    Cell &thisCell = (*cellPtr);
    if (CellIsStarNode(&thisCell)) break;
    Bin &cellBin = *(thisCell.cellBin);
    cellXpos = thisCell.CellGetXposDbl();
    cellYpos = thisCell.CellGetYposDbl();
    if (!ILR) {
      myDesign.DesignSpreadCreatePseudoPort(thisCell, cellBin, cellXpos, cellYpos,
					    pseudoPinX, pseudoPinY, springConstant);
    } else {
      myDesign.DesignSpreadCreatePseudoPortILR(thisCell, cellXpos, cellYpos,
                                              pseudoPinX, pseudoPinY, springConstant);
    }
    coeffX = springConstant; coeffY = coeffX;
    linX = coeffX * (pseudoPinX / GRID_COMPACTION_RATIO);
    linY = coeffY * (pseudoPinY / GRID_COMPACTION_RATIO);
    _KEY_EXISTS_WITH_VAL(quadMap, cellPtr, quadMapItr) {
      quadCellIdx = quadMapItr->second;
      matX.SetValue(quadCellIdx, (quadMapX[quadCellIdx] + coeffX));
      matY.SetValue(quadCellIdx, (quadMapY[quadCellIdx] + coeffY));
    } else {
      cout << "SEVERE ERROR QUAD: ENTRY FOR cell: (PTR: " << &thisCell << ") "
	   << thisCell.CellGetName() << " not found in quadMap" << endl;
      exit(0);
    }
    _KEY_EXISTS_WITH_VAL(linMap, cellPtr, linMapItr) {
      linCellIdx = linMapItr->second;
      bx[linCellIdx] = linMapX[linCellIdx];
      by[linCellIdx] = linMapY[linCellIdx];
    } else {
      cout << "SEVERE ERROR LINEAR: ENTRY FOR cell: (PTR: " << &thisCell << ") "
	   << thisCell.CellGetName() << " not found in linMap" << endl;
      exit(0);
    }
    /* Update the linear matrix */
    bx[i] += linX;
    by[i] += linY;
  }
  _STEP_END("Perform cell spreading");
}

void
Design::DesignSolveForAllCellsConjGradIter(void)
{
  void *cellObj;
  ofstream logFile;
  vector<Cell *> inputCells;
  vector<Cell *> cellsSortedByLeft, cellsSortedByRight;
  //  vector<double> cellXposVec, cellYposVec;
  vector<double> pseudoPinXVec, pseudoPinYVec;
  vector<double> springConstantVec;
  map<Cell *, uint> quadMap;
  map<Cell *, uint>::iterator quadMapItr;
  map<uint, double> quadMapX, quadMapY;
  map<Cell *, uint> linMap;
  map<Cell *, uint>::iterator linMapItr;
  map<uint, double> linMapX, linMapY;
  double itrCount, stopThreshold;
  double peakUtil, averageUtil;
  double xpos, ypos;
  double cellLeft, cellBot, cellRight, cellTop;
  double rowBotBin, colLeftBin, rowTopBin, colRightBin;
  double overlapArea;
  ulong curHPWL;
  string DesignPath, DesignName, logFileName;
  string DirName, plotFileName;
  uint maxx, maxy;
  uint numXIter, numYIter;
  uint cellHeight, cellWidth;
  uint binHeight, binWidth, binIdx;
  uint numRows, numCols;
  uint peakUtilBinIdx;
  uint numVars, nodeIdx;
  uint qvalIdx, i;
  SpMat *matX, *matY;
  Bin *binOfCell, *binPtr;
  double *bx, *by;
  double constantx, constanty;
  
  /* All the initilizations */
  Env &DesignEnv = (*this).DesignEnv;
  DesignPath = DesignEnv.EnvGetDesignPath();
  DirName = DesignPath + "/.solverData";
  DesignName = DesignEnv.EnvGetDesignName();

  HyperGraph &myGraph = (*this).DesignGetGraph();

  /* Insert cells into a vector in the order of their indices in the hypergraph */ 
  HYPERGRAPH_FOR_ALL_NODES(myGraph, nodeIdx, cellObj) {
    if ((*(Cell*)cellObj).CellIsTerminal()) continue;
    inputCells.push_back((Cell *)cellObj);
    cellsToSolve.push_back((Cell *)cellObj);
  } HYPERGRAPH_END_FOR;

  DesignSetCellsToSolve(inputCells);

  getObjFuncInConjGradFormat((*this), myGraph, inputCells, &matX, &matY, 
			     &bx, &by, constantx, constanty, quadMap,
			     linMap, DesignEnv);

  /* STORE THE ORIGINAL VALUES OF THE QUADRATIC TERMS IN A MAP */
  /* THIS WOULD BE A KEY-VALUE: INDEX-VALUE PAIR WHICH WOULD   */
  /* THEN BE USED TO REPLACE THE VALUES IN THE QVALIJ MATRIX   */
  Cell *cellPtr;
  MAP_FOR_ALL_ELEMS(quadMap, Cell*, uint, cellPtr, qvalIdx) {
    quadMapX[qvalIdx] = (*matX).GetValue(qvalIdx);
    quadMapY[qvalIdx] = (*matY).GetValue(qvalIdx);
  } END_FOR;
  MAP_FOR_ALL_ELEMS(linMap, Cell*, uint, cellPtr, qvalIdx) {
    linMapX[qvalIdx] = bx[qvalIdx];
    linMapY[qvalIdx] = by[qvalIdx];
  } END_FOR;
  
  numVars = inputCells.size();
  double x[numVars];
  double y[numVars];
  double eps=1e-13;
  uint max_iterations = 2000;
  for (i = 0; i < numVars; i++) {
    x[i] = 0.0;
    y[i] = 0.0;
    pseudoPinXVec.push_back(-1.0);
    pseudoPinYVec.push_back(-1.0);
    springConstantVec.push_back(-1.0);
  }

  /**************************************************************/
  /* LOOP OF QUADRATIC SOLVING AND SPREADING BEINGS HERE        */
  /**************************************************************/
  numXIter = 0; numYIter = 0;
  itrCount = 0;
  stopThreshold = 1;

  _STEP_BEGIN("Analytical solve and spread iterations");
  DesignGetBoundingBox(maxx, maxy);
  DesignComputeBinSize(false);
  binHeight = DesignGetBinHeight();
  binWidth = DesignGetBinWidth();
  numRows = DesignGetNumBinRows();
  numCols = DesignGetNumBinCols();
  ProfilerStart("GlobalPlacement");
  while (1) {
    /**************************************************************/
    /* SOLVER PART BEGINS HERE  :  SOLVE FOR X FIRST AND THEN Y   */
    /**************************************************************/
    _STEP_BEGIN("Solve for X-Y using Conjugate Gradient minimization");
    numXIter = cghs(numVars, (*matX), bx, x, eps, false, max_iterations);
    numYIter = cghs(numVars, (*matY), by, y, eps, false, max_iterations);
    _STEP_END("Solve for Y using Conjugate Gradient minimization");
    /**************************************************************/
    /* ASSIGN LOCATIONS TO CELLS AND ADDING TO BINS               */
    /**************************************************************/
    _STEP_BEGIN("Assign locations to cells and add to bin");
    for (i = 0; i < numVars; i++) {
      cellPtr = inputCells[i];
      xpos = x[i] * GRID_COMPACTION_RATIO; ypos = y[i] * GRID_COMPACTION_RATIO;
      cellWidth = (*cellPtr).CellGetWidth();
      cellHeight = (*cellPtr).CellGetHeight();
      cellRight = xpos + cellWidth;
      cellTop = xpos + cellHeight;
      cellBot = ypos; cellLeft = xpos;
      /* Fix bounds overflow */
      //      if (cellRight > maxx) { xpos = cellRight - maxx; }
      //      if (cellTop > maxy) { ypos = cellTop - maxy; }
      //      if (xpos < 0) { xpos = 0; }
      //      if (ypos < 0) { ypos = 0; }
      //      if (xpos > maxx) { xpos = maxx - cellWidth - 1; }
      //      if (ypos > maxy) { ypos = maxy - cellHeight - 1; }
      (*cellPtr).CellSetPosDbl(xpos, ypos);
    }
    _STEP_END("Assigning locations to cells and add to bin");

    /**************************************************************/
    /* CREATE BINS                                                */
    /**************************************************************/
    DesignCreateBins();

    /**************************************************************/
    /* BIN STRETCHING                                             */
    /**************************************************************/
    _STEP_BEGIN("Compute max utilization");
    DesignStretchBins();
    _STEP_END("Compute max utilization");
    /**************************************************************/
    /* PRINT THE PEAK UTILIZATION VALUE                           */
    /**************************************************************/
    DesignPrintSpreadIter(itrCount++, numXIter, numYIter);
    /**************************************************************/
    /* STOPPING CONDITION                                         */
    /**************************************************************/
    if (itrCount > 10) break;
    plotFileName = DesignName + "_itr_" + getStrFromInt(itrCount) + ".plt";
    DesignPlotData("Title", plotFileName);
    //    if (DesignBreakSolverPhaseI()) {
    //      break;
    //    }
    /**************************************************************/
    /* ADD SPREAD FORCES ON CELLS                                 */
    /**************************************************************/
    DesignAddSpreadForcesConjGrad((*this), inputCells, 
   	           pseudoPinXVec, pseudoPinYVec, springConstantVec,
		   quadMap, linMap, quadMapX, quadMapY, linMapX,
	           linMapY, (*matX), (*matY), bx, by, false);
    /**************************************************************/
    /* REMOVE BINS                                                */
    /**************************************************************/
    _STEP_BEGIN("Perform bin refresh");
    DesignDestroyBins();
    _STEP_END("Perform bin refresh");
  }
  cout << "Global placement complete: Phase I" << endl;
  plotFileName = DesignName + ".phase1.gp.plt";
  DesignPlotData("Title", plotFileName);
  DesignComputeHPWL();
  curHPWL = DesignGetHPWL();
  cout << "HPWL-X: " << DesignGetXHPWL() << "  HPWL-Y: " << DesignGetYHPWL() 
       << " HPWL: " << curHPWL << endl;
  ProfilerStop();
  return;
  /**********************************************************/
  /* BEGIN ITERATIVE LOCAL REFINEMENT                       */
  /**********************************************************/
  DesignDestroyBins();
  uint ilrItrCount = 0;
  uint largeBinHeight, largeBinWidth;
  binHeight = DesignGetAverageStdCellHeight();
  binWidth = DesignGetAverageStdCellWidth();
  largeBinHeight = binHeight * 10;
  largeBinWidth = binWidth * 10;
  for (i = 0; i < numVars; i++) {
    cellPtr = inputCells[i];
    (*cellPtr).CellSetOldXpos((*cellPtr).CellGetXposDbl());
    (*cellPtr).CellSetOldYpos((*cellPtr).CellGetYposDbl());
  }
  DesignComputeBinSize(true);
  while (1) {
    if (ilrItrCount == 6) {
      break;
    }
    DesignCreateBins();
    DesignDoILRIter();
    DesignAddSpreadForcesConjGrad((*this), inputCells, pseudoPinXVec, pseudoPinYVec, 
				  springConstantVec, quadMap, linMap, quadMapX, quadMapY, 
				  linMapX, linMapY, (*matX), (*matY), bx, by, true);
    numXIter = cghs(numVars, (*matX), bx, x, eps, false, max_iterations);
    numYIter = cghs(numVars, (*matY), by, y, eps, false, max_iterations);
    for (i = 0; i < numVars; i++) {
      cellPtr = inputCells[i];
      (*cellPtr).CellSetOldXpos((*cellPtr).CellGetXposDbl());
      (*cellPtr).CellSetOldYpos((*cellPtr).CellGetYposDbl());
      xpos = x[i] * GRID_COMPACTION_RATIO;
      ypos = y[i] * GRID_COMPACTION_RATIO;
      (*cellPtr).CellMoveCell(xpos, ypos);
    }
    DesignPrintSpreadIter(ilrItrCount++, numXIter, numYIter);
    //    plotFileName = DesignName + "_ILR_" + getStrFromInt(ilrItrCount) + ".plt";
    //    DesignPlotData("Title", plotFileName);

    DesignDestroyBins();
    largeBinHeight -= binHeight;
    largeBinWidth -= binWidth;
    break;
  }
  /* ILR LOOP END */
}
