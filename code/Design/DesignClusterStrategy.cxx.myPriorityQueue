# include <Design.h>

/*********************************************************************
   Top level function to perform default clustering 
   Iterate over the netlist and generate vector     
   of vector of cells and a cluster is created for  
   each vector of cells in the top level vector     
*********************************************************************/
bool
Design::DesignDoDefaultCluster(HyperGraph &myGraph)
{
  Design& myDesign = (*this);
  Cell *cellPtr, *thisCellPtr;
  vector<vector<void * > >cellsToCluster;
  string cellName;
  unsigned int numClustered;
  uint numClusters;
  bool rtv;

  _STEP_BEGIN("Begin default clustering");

  rtv = true;
  numClusters = 0;
  DESIGN_FOR_ALL_STD_CELLS(myDesign, cellName, cellPtr) {
    if ((*cellPtr).CellIsHidden()) continue;
    vector<Cell *> connectedCells = DesignGetConnectedCells(myGraph, cellPtr);
    if (connectedCells.empty()) {
      continue;
    }
    connectedCells.push_back(cellPtr);
    DesignClusterCells(connectedCells, /* collapseClustersInList */ true, 
		       /* placeBoundaryCells */ true);
    numClusters++;
    //    if (numClusters == 1000) break;
  } DESIGN_END_FOR;

  _STEP_END("End default clustering");

  return rtv;
}

/***************************************************
  TOP LEVEL FUNCTION TO DO TIMING DRIVEN CLUSTERING
***************************************************/
bool
Design::DesignDoTimingDrivenCluster(HyperGraph &myGraph)
{
  Path *thisPath;
  Cell *cellPtr;
  vector<Cell *> clusterList;
  uint pathIdx;

  _STEP_BEGIN("Path-based clustering");

  DESIGN_FOR_ALL_PATHS((*this), pathIdx, thisPath) {
    vector<Cell *> &pathCells = (*thisPath).PathGetCells();
    clusterList.clear();
    VECTOR_FOR_ALL_ELEMS(pathCells, Cell*, cellPtr) {
      if ((*cellPtr).CellIsHidden()) continue;
      if ((*cellPtr).CellIsSequential()) continue;
      clusterList.push_back(cellPtr);
    } END_FOR;
    if (clusterList.empty()) continue;
    DesignClusterCells(clusterList, /* collapseClustersInList */ true, 
		       /* placeBoundaryCells */ true);
  } DESIGN_END_FOR;

  _STEP_END("Path-based clustering");
}

/* Supporting function for best choice clustering */
/* Computes the score between two cells by using the hypergraph */
double
computeScore(HyperGraph &myGraph, Cell *cellObj1, Cell *cellObj2)
{
  double score, totalEdgeWeight, edgeWeight;
  double areaCell1, areaCell2;
  uint edgeIdx;
  
  totalEdgeWeight = 0;
  HYPERGRAPH_FOR_ALL_EDGES_OF_OBJECTS(myGraph, cellObj1, cellObj2, 
				      edgeIdx, edgeWeight) {
    totalEdgeWeight += edgeWeight;
  } HYPERGRAPH_END_FOR;
  areaCell1 = (*cellObj1).CellGetArea() / (GRID_COMPACTION_RATIO ^ 2);
  areaCell2 = (*cellObj2).CellGetArea() / (GRID_COMPACTION_RATIO ^ 2);
  score = totalEdgeWeight / (areaCell1 + areaCell2);
  
  return (score);
}

bool 
printPriorityQueue(PriorityQueue<objPairScore<Cell *>, objPairScoreCompare> pqueue)
{
  ofstream opFile("log");
  Cell *cellObj1, *cellObj2;
  double score;
  while (!pqueue.empty()) {
    objPairScore<Cell *> topPair = pqueue.pop(); 
    topPair.GetObjs(cellObj1, cellObj2);
    score = topPair.GetScore();
    opFile << "Cell1: " << (*cellObj1).CellGetName() 
	   << " Cell2: " << (*cellObj2).CellGetName()
	   << " Score " << score << endl;
  }
  opFile.close();
}

/* Get the best neighbour of a node u from the hypergraph */
bool
getBestNeighbor(HyperGraph &myGraph, Cell *&cellObj1, Cell *&cellObj2, double &score,
		PriorityQueue<objPairScore<Cell *>, objPairScoreCompare>& pqueue,
		map<void *, uint> &visitedLeftNodes)
{
  map<void *, bool> visitedNodes;
  vector<pair<Cell *, double> > scoreVect;
  void *nodeObj1, *nodeObj2;
  double edgeWeight;
  uint edgeIdx;
  bool rtv, scoreComputed;
  
  nodeObj1 = (void *)cellObj1;
  cellObj2 = NIL(Cell *);
  score = 0.0;
  rtv = false;
  scoreComputed = false;
  HYPERGRAPH_FOR_ALL_EDGES_OF_OBJECT(myGraph, nodeObj1, edgeIdx, edgeWeight) {
    rtv = true;
    if (myGraph.EdgeGetNumNodes(edgeIdx) > HIGH_FANOUT) {
      continue;
    }
    HYPERGRAPH_FOR_ALL_NODES_OF_EDGE(myGraph, edgeIdx, nodeObj2) {
      if (nodeObj1 == nodeObj2) {
	continue;
      }
      scoreComputed = true;
      _KEY_EXISTS(visitedLeftNodes, nodeObj2) continue;
      _KEY_EXISTS(visitedNodes, nodeObj2) continue;
      visitedNodes[nodeObj2] = true;
      cellObj2 = (Cell *)nodeObj2;
      if ((*cellObj2).CellIsTerminal()) continue;
      score = computeScore(myGraph, cellObj1, cellObj2);
      scoreVect.push_back(make_pair(cellObj2, score));
    } HYPERGRAPH_END_FOR;
  } HYPERGRAPH_END_FOR;
  if (rtv == false) {
    _ASSERT_TRUE("No edges of node");
  }

  if (!scoreVect.empty()) {
    scoreCmpType cmpObjType;
    sort(scoreVect.begin(), scoreVect.end(), cmpObjType);
    cellObj2 = (scoreVect[0]).first;
    score = (scoreVect[0]).second;
  }

  return (scoreComputed);
}

/* Builds the priority queue for best choice clustering */
PriorityQueue<objPairScore<Cell *>, objPairScoreCompare> 
buildPriorityQueue(HyperGraph &myGraph)
{
  Cell *cellObj1, *cellObj2;
  void *nodeObj1, *nodeObj2;
  map<void *, uint> visitedLeftNodes;
  double edgeWeight, score;
  double areaCell1, areaCell2;
  uint nodeIdx1, edgeIdx;
  bool result;

  /* Create a priority queue */
  PriorityQueue<objPairScore<Cell *>, objPairScoreCompare> pqueue;
  HYPERGRAPH_FOR_ALL_NODES(myGraph, nodeIdx1, nodeObj1) {
    visitedLeftNodes[nodeObj1] = 1;
    cellObj1 = (Cell *)nodeObj1;
    areaCell1 = (*cellObj1).CellGetArea();
    if ((*cellObj1).CellIsTerminal()) continue;
    result = getBestNeighbor(myGraph, cellObj1, cellObj2, score, pqueue, 
			    visitedLeftNodes);
    if (!result) continue;
    objPairScore<Cell*> thisPair(cellObj1, cellObj2, score);
    pqueue.push(thisPair);
  } HYPERGRAPH_END_FOR;
  pqueue.sortQueue();
  
  return (pqueue);
}

/***************************************************
  TOP LEVEL FUNCTION TO DO BEST CHOICE CLUSTERING
***************************************************/
bool
Design::DesignDoBestChoiceClustering(HyperGraph &myGraph)
{
  Cell *clusteredCell, *cellObj1, *cellObj2;
  void *nodeObj1, *nodeObj2;
  vector<void *> connectedObjs;
  map<void *, uint> visitedLeftNodes;
  double edgeWeight, score, newScore;
  double areaCell1, areaCell2;
  uint nodeIdx1, nodeIdx2, edgeIdx;
  uint numNonTopNodes, numTopNodes;
  uint numOrigTopNodes, numClusters;
  uint edgeDegree, allNodes;
  bool result;

  /* Compute the number of top nodes */
  allNodes = DesignGetNumCells() + DesignGetNumClusters();
  numNonTopNodes = myGraph.GetNumNonTopNodes();
  numTopNodes = allNodes - numNonTopNodes;
  numOrigTopNodes = numTopNodes;
  numClusters = 0;
 
  /* Get the priority queue */
  PriorityQueue<objPairScore<Cell *>, objPairScoreCompare> pqueue;
  pqueue = buildPriorityQueue(myGraph);
  while (numTopNodes > (0.95 * ((double)numOrigTopNodes))) {
    cout << "BEGIN POP: " << getCPUTime() << "   " << getMemUsage() << endl;
    vector<Cell*> cellVect;
    //    if (numClusters > 100) break;
    /* Update the score of the elements being popped */
    objPairScore<Cell *> topPair = pqueue.pop();
    topPair.GetObjs(cellObj1, cellObj2);
    score = topPair.GetScore();
    if ((*cellObj1).CellIsHidden() || (*cellObj2).CellIsHidden()) {
      continue;
    }
    newScore = computeScore(myGraph, cellObj1, cellObj2);
    if (newScore < score) {
      /* Push the new score into the queue and get the next 
	 top object */
      objPairScore<Cell *> thisPair(cellObj1, cellObj2, score);
      pqueue.pushAndSort(thisPair);
      /* Get the top pair of the queue */
      topPair = pqueue.pop();
      topPair.GetObjs(cellObj1, cellObj2);      
    }
    cout << "SCORE COMPUTATION DONE: " << getCPUTime() << "   " << getMemUsage() << endl;    
    cellVect.push_back(cellObj1);
    cellVect.push_back(cellObj2);
    cout << "CLUSTER: Clustered cells " << (*cellObj1).CellGetName() 
	 << "  " << (*cellObj2).CellGetName() << endl;
    /* Create the cluster */
    clusteredCell = DesignClusterCells(cellVect, /* collapseClustersInList */ true, 
				       /* placeBoundaryCells */ true);
    cout << "CLUSTER FORMATION DONE: " << getCPUTime() << "   " << getMemUsage() << endl;    
    numClusters++;
    /* Find the closest neighbor of u', v' and insert the 
       pair u', v' into the priority queue */
    cellObj1 = clusteredCell;
    nodeObj1 = (void*)clusteredCell;
    areaCell1 = (*clusteredCell).CellGetArea();
    result = getBestNeighbor(myGraph, cellObj1, cellObj2, score, pqueue, visitedLeftNodes);
    if (!result) continue;
    visitedLeftNodes.clear();
    cout << "IDENTIFYING NEIGHBOURING OBJECTS DONE: " << getCPUTime() << "   " << getMemUsage() << endl;
    objPairScore<Cell *> newPair(cellObj1, cellObj2, score);
    pqueue.pushAndSort(newPair);
    cout << "PUSHING PAIR AND SORTING OBJECTS DONE: " << getCPUTime() << "   " << getMemUsage() << endl;    

    /* Iterating over the priority queue */
    allNodes = DesignGetNumCells() + DesignGetNumClusters();
    numNonTopNodes = myGraph.GetNumNonTopNodes();
    numTopNodes = allNodes - numNonTopNodes;
    cout << "END, NUMTOPNODES: " << numTopNodes << " POP: " << getCPUTime() << "   " << getMemUsage() << endl;
  }
}

/***************************************************
  TOP LEVEL FUNCTION TO DO FIRST CHOICE CLUSTERING
***************************************************/
bool
Design::DesignDoFirstChoiceClustering(HyperGraph &myGraph)
{
  
}

/***************************************************
  FUNCTION TO TEST THE CLUSTER CREATION AND 
  DESTRUCTION AND PLACEMENT OF CELLS AROUND
***************************************************/
bool
Design::DesignDoClusterTest()
{
  vector<Cell *> listOfCells;
  Cell *clusterCell;
  Cell *cell1 = DesignGetNode("o90");  listOfCells.push_back(cell1);
  Cell *cell2 = DesignGetNode("o89");  listOfCells.push_back(cell2);
  Cell *cell3 = DesignGetNode("o2138");  listOfCells.push_back(cell3);
  Cell *cell4 = DesignGetNode("o1778");   listOfCells.push_back(cell4);
  Cell *cell5 = DesignGetNode("o91");   listOfCells.push_back(cell5);
  Cell *cell6 = DesignGetNode("o0"); listOfCells.push_back(cell6);
  Cell *cell7 = DesignGetNode("o1986"); listOfCells.push_back(cell7);
  Cell *cell8 = DesignGetNode("o1987"); listOfCells.push_back(cell8);
  Cell *cell9 = DesignGetNode("o92"); listOfCells.push_back(cell9);

  DesignClusterCells(listOfCells, /* collapseClustersInList */ true, 
		     /* placeBoundaryCells */ true);
  
  clusterCell = DesignGetNode("c1");
  
  (*clusterCell).CellSetXpos(100000);
  (*clusterCell).CellSetYpos(100000);

  /* Dissolve the cluster */
  DesignUnclusterCell(clusterCell, false);
}
