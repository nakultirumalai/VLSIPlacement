# include <Design.h>

bool debugPrint = false;

void 
getLogicConeRecur(Design& myDesign, Cell &cellObj, Pin *fromPin,
		  vector<Cell*>& relatedCells, 
		  vector<Pin* >& relatedPins, 
		  vector<unsigned int>& logicalDepths,
		  vector<double>& cellDelays,
		  unsigned char direction, 
		  map<Cell*, unsigned int>& visitedCells,
		  unsigned int logicalDepth,
		  double totalCellDelay,
		  bool noReg)
{
  Pin *pinPtr;
  char pinsOfNetDir;
  unsigned int numRelatedCells;

  visitedCells[&cellObj] = 1;
  logicalDepth++;

  /* The cell that is part to this part of the code can never 
     be a port or a sequential cell */
  CELL_FOR_ALL_PINS(cellObj, direction, pinPtr) {
    Net &connectedNet = (*pinPtr).PinGetNet();
    Pin *nextPinPtr;
    Pin *pin1, *pin2;
    
    if ((*fromPin).PinGetDirection() == PIN_DIR_OUTPUT) {
      pin1 = fromPin;
      pin2 = pinPtr;
    } else if ((*pinPtr).PinGetDirection() == PIN_DIR_OUTPUT) {
      pin1 = pinPtr;
      pin2 = fromPin;
    }
    totalCellDelay += 
      myDesign.DesignGetDelayArc(cellObj.CellGetLibCellName(), 
				 (*pin1).PinGetLibName(), 
				 (*pin2).PinGetLibName());
    if (direction == PIN_DIR_INPUT) pinsOfNetDir = PIN_DIR_OUTPUT;
    else if (direction == PIN_DIR_OUTPUT) pinsOfNetDir = PIN_DIR_INPUT;
    NET_FOR_ALL_PINS_DIR(connectedNet, pinsOfNetDir, nextPinPtr) {
      if ((*nextPinPtr).PinIsClock()) {
	continue;
      }
      Cell& nextCell = (*nextPinPtr).PinGetParentCell();
      if (visitedCells.find(&nextCell) != visitedCells.end()) {
	continue;
      } 
      if (nextCell.CellIsSequential() || nextCell.CellIsPort()) {
	if (noReg == true) {
	  if (nextCell.CellIsSequential()) continue;
	}
	relatedPins.push_back(nextPinPtr);
	relatedCells.push_back(&nextCell);
	if (nextCell.CellIsPort()) {
	  numRelatedCells = PortGetNumRelatedCells(&nextCell);
	  numRelatedCells++;
	  PortSetNumRelatedCells(&nextCell, numRelatedCells);
	}
	logicalDepths.push_back(logicalDepth);
	cellDelays.push_back(totalCellDelay);
      } else {
	getLogicConeRecur(myDesign, nextCell, nextPinPtr, relatedCells, 
			  relatedPins, logicalDepths, cellDelays, direction, 
			  visitedCells, logicalDepth, totalCellDelay, noReg);
      }
    } END_FOR;
  } END_FOR;
}


/*******************************************************************************
  A POWERFUL TRAVERSAL FUNCTION WHICH STARTS WITH A SEQ. REGISTER AND
  RETURNS THE FOLLOWING:
  1) Pairs of pins: Pin of the sequential element, Pin of the related port 
     or the pin of the related sequential register
  2) Corresponding to each pair, a cell related to the sequential register
  3) The number of levels of logic between the sequential register and the 
     port / another seq. register
*******************************************************************************/
void
getLogicCone(Design &myDesign, Cell &cellObj, vector<Cell*>& relatedCells, 
	     vector<unsigned int>& logicalDepths, vector<double>& cellDelays,
	     vector<pair<Pin*, Pin* > >& relatedPins, unsigned char direction,
	     bool noReg)
{
  map<Cell*, unsigned int> visitedCells;
  char pinsOfNetDir;
  unsigned int numRelatedCells;
  Pin *pinPtr;

  /* Iterate over all pins of the specified direction */
  visitedCells[&cellObj] = 1;
  CELL_FOR_ALL_PINS(cellObj, direction, pinPtr) {
    Net &connectedNet = (*pinPtr).PinGetNet();
    Pin *nextPinPtr;
    if (direction == PIN_DIR_INPUT) pinsOfNetDir = PIN_DIR_OUTPUT;
    else if (direction == PIN_DIR_OUTPUT) pinsOfNetDir = PIN_DIR_INPUT;
    NET_FOR_ALL_PINS_DIR(connectedNet, pinsOfNetDir, nextPinPtr) {
      if ((*nextPinPtr).PinIsClock()) {
	continue;
      }
      Cell &nextCell = (*nextPinPtr).PinGetParentCell();
      vector<Pin*> cellRelatedPins;
      vector<Cell *> cellRelatedCells;
      vector<unsigned int> relatedLogicalDepths;
      vector<double> relatedCellDelays;
      double totalCellDelay = 0.0;
      double thisCellDelay = totalCellDelay + cellObj.CellGetArcDelay(pinPtr, nextPinPtr);
      if (nextCell.CellIsSequential() || nextCell.CellIsPort()) {
	if (noReg == true) {
	  if (nextCell.CellIsSequential()) continue;
	}
	if (nextCell.CellIsTerminal()) {
	  numRelatedCells = PortGetNumRelatedCells(&nextCell);
	  numRelatedCells++;
	  PortSetNumRelatedCells(&nextCell, numRelatedCells);
	}
	relatedPins.push_back(make_pair(pinPtr, nextPinPtr));
	relatedCells.push_back(&nextCell);
	logicalDepths.push_back((unsigned int)1);
	cellDelays.push_back(thisCellDelay);
	continue;
      } 
      getLogicConeRecur(myDesign, nextCell, nextPinPtr, cellRelatedCells, 
			cellRelatedPins, relatedLogicalDepths, 
			relatedCellDelays, direction, visitedCells, 
			1, totalCellDelay, noReg);
      Pin *pinPtrLocal;
      Cell *cellPtrLocal;
      unsigned int logicalDepth;
      double cellDelay;
      if (cellRelatedCells.size() != 0) {
	VECTOR_FOR_ALL_ELEMS(cellRelatedPins, Pin*, pinPtrLocal) {
	  relatedPins.push_back(make_pair(pinPtr, pinPtrLocal));
	} END_FOR;
	VECTOR_FOR_ALL_ELEMS(cellRelatedCells, Cell*, cellPtrLocal) {
	  relatedCells.push_back(cellPtrLocal);
	} END_FOR;
	VECTOR_FOR_ALL_ELEMS(relatedLogicalDepths, unsigned int, logicalDepth) {
	  logicalDepths.push_back(logicalDepth);
	} END_FOR;
	VECTOR_FOR_ALL_ELEMS(relatedCellDelays, double, cellDelay) {
	  cellDelays.push_back(cellDelay);
	} END_FOR;
      }
    } NET_END_FOR;
  } CELL_END_FOR;
  /* FOR DEBUGPRINTGING */
  debugPrint = false;
  if (debugPrint) {
    Cell *cellPtr;
    Pin *pinPtr1, *pinPtr2;
    unsigned int logicalDepth;
    cout<< "DBG: Obtained cone for cell " << cellObj.CellGetName() << " (" << cellObj.CellGetOrigName() << ")" << endl;
    cout<< "DBG: Size of relatedCells " << relatedCells.size() << "\tSize of pin pairs " << relatedPins.size();
    cout<< " \tSize of logical depth " << logicalDepths.size() << "\tTotal Delay of combinational cells " << cellDelays.size() << endl;

    unsigned int relatedCellSize = relatedCells.size();
    unsigned int relatedPinsSize = relatedPins.size();
    unsigned int logicalDepthsSize = logicalDepths.size();
    unsigned int cellDelaysSize = cellDelays.size();

    if (relatedCellSize != relatedPinsSize || relatedCellSize != logicalDepthsSize ||
	relatedCellSize != cellDelaysSize) {
      cout<< "Sizes are not the same" << endl;
    } else {
      for (int i = 0; i < relatedCellSize; i++) {
	Pin &relatedPin1 = *(Pin *)(relatedPins[i].first);
	Pin &relatedPin2 = *(Pin *)(relatedPins[i].second);
        Cell &relatedCell1 = relatedPin1.PinGetParentCell();
        Cell &relatedCell2 = relatedPin2.PinGetParentCell();
	cout << "DBG:\t\t Cell: " << (*(relatedCells[i])).CellGetName() 
	     << " (" << (*(relatedCells[i])).CellGetOrigName() << ")" 
	     <<"  Pin1: " << relatedPin1.PinGetName() 
	     << " Pin2: " << relatedPin2.PinGetName() 
	     << " Logical Depth:" << logicalDepths[i] 
	     << " Comb. Delay: " << cellDelays[i] << endl;
      }
    }
  }
}

void
Design::DesignSolveForSeqCells(void)
{
  Design &myDesign = *this;
  HyperGraph seqCellGraph;
  string cellName;
  Cell *cellPtr;
  map<Cell*, bool> addedCells;
  map<unsigned int, pair<Pin*, Pin* > > pinPairsOfEdge;
  vector<Cell*> inputCells;
  vector<Cell*> inputPorts;
  
  _STEP_BEGIN("Building graph for sequential cells");
  /* Traverse the input cone of each sequential cell to find a port or 
     another cell to pair with */
  vector<Cell*> relatedCells;
  vector<pair<Pin*, Pin* > > relatedPins;
  vector<unsigned int> logicalDepths;
  vector<double> cellDelays;
  long int edgeIndex;
  double edgeWeight;

  DESIGN_FOR_ALL_SEQ_CELLS(myDesign, cellName, cellPtr) {
    vector<Cell*> tmpRelatedCells;
    vector<pair<Pin*, Pin* > > tmpRelatedPins;
    vector<unsigned int> tmpLogicalDepths;
    vector<double> tmpCellDelays;
    Cell& seqCell = *cellPtr;
    Cell* tmpCellPtr;
    pair<Pin*,Pin*> tmpPinPair;
    unsigned int tmpLogicalDepth;
    double tmpCellDelay;

    if (!((*cellPtr).CellIsSequential())) {
      if (debugPrint) cout<< "Error in iterator" << endl;
      exit(0);
    }
    /* Clear global vectors */
    relatedCells.clear(); relatedPins.clear(); 
    logicalDepths.clear(); cellDelays.clear();
    /* Get the input logic cone */
    getLogicCone(myDesign, seqCell, tmpRelatedCells, tmpLogicalDepths, tmpCellDelays, 
		 tmpRelatedPins, PIN_DIR_INPUT, false);
    VECTOR_FOR_ALL_ELEMS(tmpRelatedCells, Cell*, tmpCellPtr) {
      relatedCells.push_back(tmpCellPtr);
    } END_FOR;
    VECTOR_FOR_ALL_ELEMS(tmpRelatedPins, pair<Pin* MCOMMA Pin*>, tmpPinPair) {
      relatedPins.push_back(tmpPinPair);
    } END_FOR;
    VECTOR_FOR_ALL_ELEMS(tmpLogicalDepths, unsigned int, tmpLogicalDepth) {
      logicalDepths.push_back(tmpLogicalDepth);
    } END_FOR;
    VECTOR_FOR_ALL_ELEMS(tmpCellDelays, double, tmpCellDelay) {
      cellDelays.push_back(tmpCellDelay);
    } END_FOR;

    /* Clear vectors */
    tmpRelatedCells.clear(); tmpLogicalDepths.clear(); 
    tmpCellDelays.clear(); tmpRelatedPins.clear();

    /* Get the output logic cone */
    getLogicCone(myDesign, seqCell, tmpRelatedCells, tmpLogicalDepths, tmpCellDelays,
		 tmpRelatedPins, PIN_DIR_OUTPUT, true);
    VECTOR_FOR_ALL_ELEMS(tmpRelatedCells, Cell*, tmpCellPtr) {
      relatedCells.push_back(tmpCellPtr);
    } END_FOR;
    VECTOR_FOR_ALL_ELEMS(tmpRelatedPins, pair<Pin* MCOMMA Pin*>, tmpPinPair) {
      relatedPins.push_back(tmpPinPair);
    } END_FOR;
    VECTOR_FOR_ALL_ELEMS(tmpLogicalDepths, unsigned int, tmpLogicalDepth) {
      logicalDepths.push_back(tmpLogicalDepth);
    } END_FOR;
    VECTOR_FOR_ALL_ELEMS(tmpCellDelays, unsigned int, tmpCellDelay) {
      cellDelays.push_back(tmpCellDelay);
    } END_FOR;

    /* Add the subject sequential cell into the graph and 
       the list of input cells  */
    if (addedCells.find(cellPtr) == addedCells.end()) {
      inputCells.push_back(cellPtr);
      addedCells[cellPtr] = true;
      seqCellGraph.HyperGraphAddNode(cellPtr);
    }

    for (int i = 0; i < relatedCells.size(); i++) { 
      Cell& endCell = *(Cell *)(relatedCells[i]);
      pair<Pin *, Pin *> pinPair = relatedPins[i];
      vector<void*> listOfCells;
      unsigned int portNumRelatedCells;

      listOfCells.push_back(cellPtr);
      listOfCells.push_back(&endCell);
      if (addedCells.find(&endCell) == addedCells.end()) {
	seqCellGraph.HyperGraphAddNode(&endCell);
	addedCells[&endCell] = true;
	if (!endCell.CellIsTerminal()) {
	  inputCells.push_back(&endCell);
	}
      }
      /* If the edge exists increment the weight of the edge */
      edgeIndex = seqCellGraph.HyperGraphNodesAreAdjacent(listOfCells[0], listOfCells[1]);
      if (edgeIndex == -1) {
	Net *dummyNet = new Net();
	(*dummyNet).NetAddPin(*(pinPair.first));
	(*dummyNet).NetAddPin(*(pinPair.second));
	PathSetCellDelay(dummyNet, cellDelays[i]);
	/* If the edge does not exist, add the edge */
	/* Edge weight is directly proportional to: combinational delay */
	/* Edge weight is inversly proportional to: logical depth */
	/* Edge weight is directly proportional to: terminal connection */
	/* Edge weight is inversly proportional to: number of objects the 
	   terminal is connected to  */
	edgeWeight = ((double)1)/(logicalDepths[i]);
	if (endCell.CellIsTerminal()) {
	  edgeWeight = edgeWeight * PULL_FACTOR;
	} 
	edgeIndex = seqCellGraph.HyperGraphAddEdge(listOfCells, dummyNet, edgeWeight);
      } 
      pinPairsOfEdge[edgeIndex] = relatedPins[i];
    }
  } DESIGN_END_FOR;
  _STEP_END("Building graph for sequential cells");
  seqSolveQuadraticWL(*this, seqCellGraph, inputCells);

  /* Analyze the result */
  debugPrint = false;
  if (debugPrint) {
    unsigned int edgeIdx;
    double lengthDiff;
    HYPERGRAPH_FOR_ALL_EDGES(seqCellGraph, edgeIdx, edgeWeight) {
      Net &relatedNet = *(Net *)seqCellGraph.GetEdgeObject(edgeIdx);
      Pin *pin1, *pin2, *pinPtr;
      pin1 = pin2 = NIL(Pin *);
      NET_FOR_ALL_PINS(relatedNet, pinPtr) {
	if (pin1 == NIL(Pin *)) {
	  pin1 = pinPtr;
	} else {
	  pin2 = pinPtr;
	}
      } NET_END_FOR;
      Cell &cell1 = (*pin1).PinGetParentCell();
      Cell &cell2 = (*pin2).PinGetParentCell();
    
      double cell1X = cell1.CellGetXpos();
      double cell1Y = cell1.CellGetYpos();
      double cell2X = cell2.CellGetXpos();
      double cell2Y = cell2.CellGetYpos();
      double diffX = cell1X - cell2X;
      if (diffX < 0) diffX = -diffX;
      double diffY = cell1Y - cell2Y;
      if (diffY < 0) diffY = -diffY;
      if ((diffX + diffY) > MAXWL_CSTR) {
	double WLExcess = MAXWL_CSTR - (diffX + diffY);
	if (WLExcess < 0) WLExcess = -WLExcess;
	lengthDiff += WLExcess;
	cout << "Max WL constraint not honored between cells " << cell1.CellGetName() << "(" << cell1.CellGetOrigName() << ")" 
	     << " and " << cell2.CellGetName() << "(" << cell2.CellGetOrigName() << endl;
      }
    } HYPERGRAPH_END_FOR;
    cout << "Total excess wirelength not honoring constraint is " << lengthDiff << endl;
  }
}


void 
Design::DesignSolveForAllCells(void)
{
  vector<Cell *> inputCells;
  unsigned int nodeIdx;
  void *cellObj;

  HyperGraph &myGraph = DesignGetGraph();
  /* Insert cells into a vector in the order of 
     their indices in the hypergraph */ 
  HYPERGRAPH_FOR_ALL_NODES(myGraph, nodeIdx, cellObj) {
    if ((*(Cell*)cellObj).CellIsTerminal()) continue;
    inputCells.push_back((Cell *)cellObj);
  } HYPERGRAPH_END_FOR;
  
  genSolveQuadraticWL(*this, myGraph, inputCells);
}

void 
Design::DesignSolveAllCellsSeqFirst(void) 
{
  DesignSolveForSeqCells();
  DesignSolveForAllCells();
}
void
Design::DesignSolveForSeqCellsOld(void)
{
  Design &myDesign = *this;
  HyperGraph seqCellGraph;
  string cellName;
  Cell *cellPtr;
  map<Cell*, bool> addedCells;
  map<unsigned int, pair<Pin*, Pin* > > pinPairsOfEdge;
  vector<Cell*> inputCells;
  vector<Cell*> inputPorts;
  
  _STEP_BEGIN("Building graph for sequential cells");
  /* Traverse the input cone of each sequential cell 
     to find a port or another cell to pair with */

  /* Manual addition */
  void *seqCell1;
  void *seqCell2;
  void *portCell1;
  void *portCell2;
  seqCell1 = (void *)myDesign.DesignGetNode("o0");
  seqCell2 = (void *)myDesign.DesignGetNode("o1");
  portCell1 = (void *)myDesign.DesignGetNode("o3939");
  portCell2 = (void *)myDesign.DesignGetNode("o3944");

  /*
  (*(Cell*)seqCell1).CellSetXpos(114365);
  (*(Cell*)seqCell2).CellSetXpos(112633);
  (*(Cell*)seqCell1).CellSetYpos(97304);
  (*(Cell*)seqCell2).CellSetYpos(107330);
  return;
  */

  seqCellGraph.HyperGraphAddNode(seqCell1); inputCells.push_back((Cell *)seqCell1);
  seqCellGraph.HyperGraphAddNode(seqCell2); inputCells.push_back((Cell *)seqCell2);
  seqCellGraph.HyperGraphAddNode(portCell1); inputPorts.push_back((Cell *)portCell1);
  seqCellGraph.HyperGraphAddNode(portCell2); inputPorts.push_back((Cell *)portCell2);
  
  vector<void*> listOfCells;
  unsigned int edgeIdx;

  /* First edge */
  listOfCells.push_back(seqCell1); listOfCells.push_back(seqCell2);
  Pin *pin1 = (*(Cell*)seqCell2).CellGetPinByName("o1_1");
  if (pin1 == NIL(Pin *)) {
    cout << "o1_1 not found " << endl;
  }
  Pin *pin2 = (*(Cell*)seqCell1).CellGetPinByName("o0_2");
  if (pin2 == NIL(Pin *)) {
    cout << "o0_2 not found " << endl;
  }
  Net *dummyNet = new Net();
  (*dummyNet).NetAddPin(*(pin1));
  (*dummyNet).NetAddPin(*(pin2));
  seqCellGraph.HyperGraphAddEdge(listOfCells, dummyNet, 1);
  edgeIdx = seqCellGraph.HyperGraphNodesAreAdjacent(seqCell1, seqCell2);
  PathSetCellDelay(dummyNet, 1);
  pinPairsOfEdge[edgeIdx] = make_pair(pin1, pin2);
  listOfCells.clear();

  /* Second edge */
  listOfCells.push_back(portCell1); listOfCells.push_back(seqCell1);
  pin1 = (*(Cell *)seqCell1).CellGetPinByName("o0_1");
  if (pin1 == NIL(Pin *)) {
    cout << "o0_1 not found " << endl;
  }
  pin2 = (*(Cell *)portCell1).CellGetPinByName("o3939_1");
  if (pin2 == NIL(Pin *)) {
    cout << "o3939_1 not found " << endl;
  }
  dummyNet = new Net();
  (*dummyNet).NetAddPin(*(pin1));
  (*dummyNet).NetAddPin(*(pin2));
  seqCellGraph.HyperGraphAddEdge(listOfCells, dummyNet, 1);
  edgeIdx = seqCellGraph.HyperGraphNodesAreAdjacent(portCell1, seqCell1);
  PathSetCellDelay(dummyNet, 1);
  pinPairsOfEdge[edgeIdx] = make_pair(pin1, pin2);
  listOfCells.clear();
  
  /* Third edge */
  listOfCells.push_back(seqCell2); listOfCells.push_back(portCell2);
  pin1 = (*(Cell *)seqCell2).CellGetPinByName("o1_2");
  if (pin1 == NIL(Pin *)) {
    cout << "o1_2 not found " << endl;
  }
  pin2 = (*(Cell *)portCell2).CellGetPinByName("o3944_1");
  if (pin2 == NIL(Pin *)) {
    cout << "o3944_1 not found " << endl;
  }

  dummyNet = new Net();
  (*dummyNet).NetAddPin(*(pin1));
  (*dummyNet).NetAddPin(*(pin2));
  seqCellGraph.HyperGraphAddEdge(listOfCells, dummyNet, 1);
  edgeIdx = seqCellGraph.HyperGraphNodesAreAdjacent(seqCell2, portCell2);
  pinPairsOfEdge[edgeIdx] = make_pair(pin1, pin2);
  PathSetCellDelay(dummyNet, 1);
  listOfCells.clear();

  _STEP_END("Building graph for sequential cells");
  debugPrint = false;
  if (debugPrint) {
    for (int i = 0; i < inputCells.size(); i++) {
      Cell *cellPtri = inputCells[i];
      for (int j = 0; j < inputCells.size(); j++) {
	if (i == j) {
	  continue;
	}
	Cell *cellPtrj = inputCells[j];
	int edgeIdx;
	edgeIdx = seqCellGraph.HyperGraphNodesAreAdjacent(cellPtri, cellPtrj);
	if (edgeIdx  >= 0) {
	  if (debugPrint) cout << endl;
	  if (debugPrint) cout << "Src cell: " << (*cellPtri).CellGetName() << "   ";
	  if (debugPrint) cout << "Dest cell: " << (*cellPtrj).CellGetName() << endl;
	  if (debugPrint) cout << "Edge index: " << edgeIdx << endl;
	  if (debugPrint) cout << "First pin of pair: " << ((*(Pin *)(pinPairsOfEdge[edgeIdx].first)).PinGetName()) << endl;
	  if (debugPrint) cout << "Second pin of pair: " << ((*(Pin *)(pinPairsOfEdge[edgeIdx].second)).PinGetName()) << endl;
	} else {
	  //	cout << "No Edge exists between these cells" << endl;
	}
      }
    }
  }
  debugPrint = false;
  seqSolveQuadraticWL(*this, seqCellGraph, inputCells);
}


